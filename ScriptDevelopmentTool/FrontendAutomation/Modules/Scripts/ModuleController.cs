//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Business Module" recipe.
//
// This class contains placeholder methods for the common module initialization 
// tasks, such as adding services, or user-interface element
//
//  
//
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using IMSWorkBench.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Commands;
using IMSWorkBench.Scripts.Constants;
using IMSWorkBench.Infrastructure.Library.UI;
using Microsoft.Practices.CompositeUI.EventBroker;
using System.Diagnostics;
using IMSWorkBench.Infrastructure.Library.Services;
using Infosys.ATR.UIAutomation.Entities;
using System.Xml.Linq;
using System.Linq;
using Infosys.ATR.UIAutomation.SEE;
using Infosys.ATR.ScriptEditor;

namespace IMSWorkBench.Scripts
{
    public class ModuleController : WorkItemController
    {

        private Playback playback = null;
        private ScriptsLayout scripts = null;
        private Edit edit = null;
        private Add add = null;
        public override void Run()
        {
            AddServices();
            ExtendMenu();
            ExtendToolStrip();
            AddViews();
        }

        private void AddServices()
        {
            //TODO: add services provided by the Module. See: Add or AddNew method in 
            //		WorkItem.Services collection
        }

        private void ExtendMenu()
        {
            //TODO: add menu items here, normally by calling the "Add" method on
            //		on the WorkItem.UIExtensionSites collection.
            //		
        }

        private void ExtendToolStrip()
        {
            //TODO: add new items to the ToolStrip in the Shell. See the UIExtensionSites collection in the WorkItem. 
            //		
        }

        private void AddViews()
        {
            scripts = this.WorkItem.SmartParts.AddNew<ScriptsLayout>("scripts");
            WindowSmartPartInfo info = new WindowSmartPartInfo();
            info.Title = "Scripts";
            this.WorkItem.RootWorkItem.Workspaces[WorkspaceNames.TabWorkSpace].Show(scripts, info);

            // this.WorkItem.Workspaces.Add(scripts.AppWorkspace, Constants.WorkspaceNames.AppWorkspace);
            this.WorkItem.Workspaces.Add(scripts.ScriptsWorksspace, Constants.WorkspaceNames.ScriptsWorkspace);

            playback = this.WorkItem.SmartParts.AddNew<Playback>("playback");
            WindowSmartPartInfo info1 = new WindowSmartPartInfo();
            info1.Title = "Usecases";
            this.WorkItem.Workspaces[Constants.WorkspaceNames.ScriptsWorkspace].Show(playback, info1);

            // edit = this.WorkItem.SmartParts.AddNew<Edit>("Edit");

        }

        [EventSubscription(EventTopicNames.Edit, ThreadOption.UserInterface)]
        public void OnEdit(object sender, EditEventArgs eventArgs)
        {



            //if (scripts != null)
            //{
            //    UseCaseEditor useCase = new UseCaseEditor(eventArgs.filePath);
            //    this.WorkItem.SmartParts.Add(useCase);
            //    scripts.EditWorkspace.Show(useCase);
            //}

            //UseCaseEditor useCase = new UseCaseEditor(eventArgs.filePath);
            //this.WorkItem.SmartParts.Add(useCase);            
            //WindowSmartPartInfo info = new WindowSmartPartInfo();
            //info.Title = "Edit";
            //this.WorkItem.RootWorkItem.Workspaces[WorkspaceNames.TabWorkSpace].Show(useCase, info);

        }

        [EventSubscription(EventTopicNames.Modify, ThreadOption.UserInterface)]
        public void OnModify(object sender, EventArgs<XDocument> eventArgs)
        {
            var modify = this.WorkItem.SmartParts.AddNew<Add>("Modify");
            XDocument uc = eventArgs.Data;
            WindowSmartPartInfo info = new WindowSmartPartInfo();
            info.Title = uc.Element("UseCase").Attribute("Name").Value;
            this.WorkItem.RootWorkItem.Workspaces[Constants.WorkspaceNames.TabWorkSpace].Show(modify, info);
            modify.EditUseCase = eventArgs.Data;

        }

        [EventSubscription(EventTopicNames.Script, ThreadOption.UserInterface)]
        public void OnScript(object sender, EditEventArgs eventArgs)
        {
            Sikuli.Script(eventArgs.filePath);
        }

        //private void GenerateScript(string filePath)
        //{
        //    string fileSave = "";
        //    System.Text.StringBuilder sb = new System.Text.StringBuilder();
        //    XDocument xDoc = XDocument.Load(filePath);
        //    var useCase = xDoc.Elements("UseCase");
        //    var activities = useCase.Elements("Activity");
        //    for (int i = 0; i < activities.Count(); i++)
        //    {
        //        var activity = activities.ElementAt(i);
        //        var application = activity.Element("TargetApplication").Attribute("ApplicationExe").Value;
        //        if (application != null)
        //        {
        //            sb.Append(String.Format("App.open(\"{0}\")", System.IO.Path.GetFileName(application)));
        //            sb.Append(Environment.NewLine);
        //        }

        //        var tasks = activity.Elements("Task").Where(t => t.Attribute("Name").Value != "None");
        //        bool issplKey = false;
        //        string splKey = "";
        //        for (int j = 0; j < tasks.Count(); j++)
        //        {
        //            var t = tasks.ElementAt(j);
        //            var attr = t.Attribute("Name").Value;
        //            switch (attr)
        //            {
        //                case "MouseLeftClick":
        //                    sb.Append(String.Format("click(\"{0}.png\")", t.Attribute("Id").Value));
        //                    break;
        //                case "GroupedKeys":
        //                    var text =
        //                        t.Elements("TargetControlAttributes").Where(a => a.Attribute("Name").Value == "KeyData").First().Attribute("Value").Value;
        //                    if (!issplKey)
        //                    {
        //                        sb.Append(String.Format("type(\"{0}\")", text.ToLower()));
        //                    }
        //                    else
        //                    {
        //                        var temp = text.Substring(0, 1);
        //                        sb.Append(String.Format("type(\"{0}\")", temp.ToLower()));
        //                        sb.Append(Environment.NewLine);
        //                        sb.Append(String.Format("keyUp({0})", splKey));
        //                        sb.Append(Environment.NewLine);
        //                        sb.Append(String.Format("type(\"{0}\")", text.Substring(1, text.Length - 1)));
        //                        issplKey = false;
        //                    }
        //                    break;
        //                case "CollectiveKey":
        //                    var spl =
        //                       t.Elements("TargetControlAttributes").Where(a => a.Attribute("Name").Value == "KeyData").First().Attribute("Value").Value;
        //                    if (spl.Contains("Shift"))
        //                    {
        //                        splKey = "Key.SHIFT";
        //                        sb.Append(String.Format("keyDown({0})", "Key.SHIFT"));
        //                        issplKey = true;
        //                    }
        //                    break;
        //            }
        //            sb.Append(Environment.NewLine);
        //        }

        //    }
        //    System.IO.File.WriteAllText("test.py", sb.ToString());    
        //}



        private XElement GetStartingNode(XDocument xDoc)
        {
            var activity = xDoc.Elements("Activity").Where(a => !String.IsNullOrEmpty(a.Attribute("ParentId").Value));
            return activity.Elements("TargetApplication").First(t => !String.IsNullOrEmpty(t.Attribute("ApplicationType").Value));

        }

        [EventSubscription(EventTopicNames.Execute, ThreadOption.UserInterface)]
        public void OnExecute(object sender, EditEventArgs eventArgs)
        {
            //Win32.MinimizeAll();
            //Sikuli.Run(eventArgs.filePath);
        }
    }
}
