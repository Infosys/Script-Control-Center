//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// 
//
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using IMSWorkBench.Infrastructure.Interface;
using Infosys.ATR.UIAutomation.Entities;
using Infosys.ATR.UIAutomation.SEE;
using System.Collections.Generic;
using System.IO;
using IMSWorkBench.Scripts.Entities;
using System.Text;
using System.Linq;
using Microsoft.Practices.CompositeUI.EventBroker;
using IMSWorkBench.Scripts.Constants;
using System.ComponentModel;
using Infosys.ATR.DataAnalysis;
using System.Configuration;
using IMSWorkBench.Scripts.Views.Playback;
using IMSWorkBench.Scripts.Views.ScriptsLayout;
using System.Drawing;

namespace IMSWorkBench.Scripts
{

    public partial class Playback : UserControl, IPlayback
    {
        [EventPublication(EventTopicNames.StatusUpdate, PublicationScope.Global)]
        public event EventHandler<EventArgs> StatusUpdate;

        public delegate void ApplicationListEventHandler(ApplicationEventArgs e);
        List<UsecaseFile> usecases = new List<UsecaseFile>();
        List<UseCase> export = new List<UseCase>();
        List<string> usecaseFilenames = new List<string>();
        List<ExtractedData> dataForApplicationEvents = new List<ExtractedData>();
        List<ExtractedData> dataForControlPath = new List<ExtractedData>();
        List<ExtractedData> dataForApplicationPath = new List<ExtractedData>();
        List<ExtractedData> dataForScreenPath = new List<ExtractedData>();
        DGVColumnHeader dgvColumnHeader;
        static bool rootChecked = false;
        List<Grid> grids = new List<Grid>();
       
        public Playback()
        {
            InitializeComponent();
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            base.OnLoad(e);
            string folderPath = @System.Configuration.ConfigurationManager.AppSettings["FileSystemWatcher"];
            string[] fileEntries = Directory.GetFiles(folderPath, "Untitled-*.txt");
            foreach (string files in fileEntries)
            {
                File.Delete(files);
            }

            LoadUseCases();
           
        }

        public void LoadUseCases()
        {
            //   this.toolTip1.SetToolTip(button1, "Record");
            string folderPath = @System.Configuration.ConfigurationManager.AppSettings["FileSystemWatcher"];

            string[] filePaths = Directory.GetFiles(folderPath);

            //this.UsecaseGrid.AutoGenerateColumns = false;
            this.UsecaseGrid.AllowUserToAddRows = true;

            for (int i = 0; i < filePaths.Length; i++)
            {
                usecases.Add(ExtractUsecaseName(filePaths[i]));
            }

            //select only usecase names as datasource to gridview
            List<string> ds = usecases.Select(a => a.usecaseName).ToList();

            //create datasource for grid
            List<StringValue> ds1 = new List<StringValue>();
            //add StringValues to datasource

            List<Grid> grids = new List<Grid>();

            ds.ForEach(
                s =>
                grids.Add(new Grid { Script = s })
                );

            TreeNode rootNode = new TreeNode("Scripts");
           
            foreach (Grid value in grids)
            {
                TreeNode treeNode = new TreeNode(value.Script);
                rootNode.Nodes.Add(treeNode);
            }
            treeUsecase.Nodes.Add(rootNode);
            foreach (TreeNode ChildNode in rootNode.Nodes)
            {
                ChildNode.ContextMenuStrip = contextMenuStrip2; ;
            }
            treeUsecase.ExpandAll();
            UsecaseGrid.DataSource = grids;
            dgvColumnHeader = new DGVColumnHeader();

            //Add columns dynamically  to gridview
            UsecaseGrid.Columns.Insert(0, new DataGridViewCheckBoxColumn());
            UsecaseGrid.Columns[0].HeaderCell = dgvColumnHeader;
            UsecaseGrid.Columns[1].Width = 75;
            UsecaseGrid.Columns[2].Width = 25;
            UsecaseGrid.Columns[5].Visible = false;
           // UsecaseGrid.Visible = true;
            fileSystemWatcher1.Path = folderPath;
            // UsecaseGrid.CellContentClick +=new DataGridViewCellEventHandler(UsecaseGrid_CellContentClick);


        }


        /// <summary>
        /// raise event on click of RUN link
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void UsecaseGrid_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

            //if (e.ColumnIndex == 0)
            //{
            //    int index = e.RowIndex;
            //    string path = usecases.ElementAt(index).filepath;
            //    PlayActions playActObj = new PlayActions();
            //    List<string> appObjs = playActObj.GetApplications(path);
            //    ApplicationEventArgs obj = new ApplicationEventArgs
            //    {
            //        ApplicationList = appObjs,
            //        UseCaseCaptured = playActObj.UseCaseCaptured
            //    };
            //    this._presenter.OnRun(obj);
            //}

            if (e.ColumnIndex == 2 && e.RowIndex != -1)
            {
                var cell = UsecaseGrid.Rows[e.RowIndex].Cells[1] as DataGridViewTextBoxCell; 
                var linkcell = UsecaseGrid.Rows[e.RowIndex].Cells[e.ColumnIndex] as DataGridViewImageCell;
                string title =Convert.ToString(cell.Value);
                if (!title.Contains("Untitled-"))
                {
               
                this._presenter.OnEdit(new EditEventArgs { filePath = usecases.ElementAt(e.RowIndex).filepath, fileName = usecases.ElementAt(e.RowIndex).usecaseName});
                   
                }
            }
            //else if (e.ColumnIndex == 3)
            //{
            //    this._presenter.OnScript(new EditEventArgs { filePath = usecases.ElementAt(e.RowIndex).filepath });
            //}
            else if (e.ColumnIndex == 3 && e.RowIndex != -1)
            {
                var cell = UsecaseGrid.Rows[e.RowIndex].Cells[1] as DataGridViewTextBoxCell; ;
                var linkcell = UsecaseGrid.Rows[e.RowIndex].Cells[e.ColumnIndex] as DataGridViewImageCell;
                string title = Convert.ToString(cell.Value);
                if (!title.Contains("Untitled-"))
                {
                    ExecuteDialog ExecuteOptions = new ExecuteDialog();
                    ExecuteOptions.ShowDialog();
                    string selectedExecutemethod = ExecuteOptions.TheValue;
                    this._presenter.OnExecute(new EditEventArgs { filePath = usecases.ElementAt(e.RowIndex).filepath, ExecuteOption = selectedExecutemethod });
                 }
            }
            else if (e.ColumnIndex == 4 && e.RowIndex != -1)
            {
                var cell = UsecaseGrid.Rows[e.RowIndex].Cells[1] as DataGridViewTextBoxCell; ;
                var linkcell = UsecaseGrid.Rows[e.RowIndex].Cells[e.ColumnIndex] as DataGridViewImageCell;
                string title = Convert.ToString(cell.Value);
                if (!title.Contains("Untitled-"))
                {
                     bool isSuccess = false;
                     string filePath = usecases.ElementAt(e.RowIndex).filename;
                     string IDEfiles = usecases.ElementAt(e.RowIndex).usecaseName;
                     var confirmResult = MessageBox.Show("Are you sure to delete this item ??", "Confirm Delete!!", MessageBoxButtons.OKCancel);
                     if (confirmResult == DialogResult.OK)
                     {
                         isSuccess = DeleteScripts(filePath, IDEfiles);
                     }
                     else
                     {

                     }

                     if (isSuccess)
                     {
                         MessageBox.Show("Script Deleted", "Frontend Automation", MessageBoxButtons.OK, MessageBoxIcon.Information);
                     }
                 }
            }

        }

        private void ExportToCsv(int rowindex)
        {
            string path = usecases.ElementAt(rowindex).filepath;
            System.Xml.XmlDocument xmlDoc = new System.Xml.XmlDocument();
            xmlDoc.Load(path);
            var usecase = SerializeAndDeserialize.Deserialize(xmlDoc.OuterXml, typeof(Infosys.ATR.UIAutomation.Entities.UseCase))
                as Infosys.ATR.UIAutomation.Entities.UseCase;
            export.Add(usecase);

        }

        /// <summary>
        /// extracts the contents of file in stringBuilder object
        /// and creates usecasefile object
        /// </summary>
        /// <param name="filePaths"></param>
        /// <returns></returns>
        private static UsecaseFile ExtractUsecaseName(string filePaths)
        {
            UsecaseFile temp = new UsecaseFile();
            StringBuilder sb = new StringBuilder();
            ReadFileIntoString(filePaths, sb);
            string allines = sb.ToString();
            UseCase uc = SerializeAndDeserialize.Deserialize(allines, typeof(UseCase)) as UseCase;
            temp.usecaseName = uc.Name;
            temp.filepath = filePaths;
            temp.filename = Path.GetFileName(filePaths);

            return temp;
        }
        private static bool CheckifATRXML(string filePaths)
        {
            bool IsATRXML = false;
            UsecaseFile temp = new UsecaseFile();
            StringBuilder sb = new StringBuilder();
            ReadFileIntoString(filePaths, sb);
            string allines = sb.ToString();
            UseCase uc = SerializeAndDeserialize.Deserialize(allines, typeof(UseCase)) as UseCase;
            if (uc.Activities.Count != 0)
            {
                IsATRXML = true;
            }
            return IsATRXML;
        }


        /// <summary>
        /// this method waits for this threads tirn to access the file
        /// as soon as it can access the file, it reads its contents in stringbuilder object
        /// </summary>
        /// <param name="filePaths"></param>
        /// <param name="sb"></param>
        /// <returns></returns>
        private static bool ReadFileIntoString(string filePaths, StringBuilder sb)
        {
            while (true)
            {
                try
                {
                    using (StreamReader sr = new StreamReader(filePaths))
                    {
                        String line;
                        while ((line = sr.ReadLine()) != null)
                        {
                            sb.AppendLine(line);
                        }
                        break;
                    }
                }
                catch
                {
                    System.Threading.Thread.Sleep(500);

                }
            }
            return true;
        }


        /// update the gridview datasource when file is deleted from folder
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void fileSystemWatcher1_Deleted(object sender, FileSystemEventArgs e)
        {
            UsecaseFile usc = usecases.Where(x => x.filepath == e.FullPath).FirstOrDefault();
            usecases.Remove(usc);
            List<string> ds = usecases.Select(a => a.usecaseName).ToList();

            List<Grid> grids = new List<Grid>();
            ds.ForEach(s => grids.Add(new Grid { Script = s }));
            treeUsecase.Nodes.Clear();
            TreeNode rootNode = new TreeNode("Scripts");
            foreach (Grid value in grids)
            {
                TreeNode treeNode = new TreeNode(value.Script);
                rootNode.Nodes.Add(treeNode);
            }
            foreach (TreeNode ChildNode in rootNode.Nodes)
            {
                if (!ChildNode.Text.Contains("Untitled-"))
                {
                    ChildNode.ContextMenuStrip = contextMenuStrip2; ;
                }
            }
            treeUsecase.Nodes.Add(rootNode);
            treeUsecase.ExpandAll();
            UsecaseGrid.DataSource = grids;
        }

        /// <summary>
        /// update the gridview datasource when file is added to the folder
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void fileSystemWatcher1_Created(object sender, FileSystemEventArgs e)
        {
            usecases.Add(ExtractUsecaseName(e.FullPath));
            List<string> ds = usecases.Select(a => a.usecaseName).ToList();

           // grids.Clear();
            List<Grid> grids = new List<Grid>();
            ds.ForEach(s => grids.Add(new Grid { Script = s }));
            treeUsecase.Nodes.Clear();
            TreeNode rootNode = new TreeNode("Scripts");
            foreach (Grid value in grids)
            {
                TreeNode treeNode = new TreeNode(value.Script);
                rootNode.Nodes.Add(treeNode);
            }
            foreach (TreeNode ChildNode in rootNode.Nodes)
            {
                if(!ChildNode.Text.Contains("Untitled-"))
                {
                ChildNode.ContextMenuStrip = contextMenuStrip2; ;
                }
            }
            treeUsecase.Nodes.Add(rootNode);
            treeUsecase.ExpandAll();
            UsecaseGrid.DataSource = grids;
           
        }




        void backgroundWorker1_RunWorkerCompleted(object sender, System.ComponentModel.RunWorkerCompletedEventArgs e)
        {
            OnStatusUpdate(new EventArgs<string>("Usecase(s) uploaded"));
            export.Clear();
        }

        private void backgroundWorker1_DoWork(object sender, System.ComponentModel.DoWorkEventArgs e)
        {
            OnStatusUpdate(new EventArgs<string>("Uploading usecase(s)"));
            IMSWorkBench.Scripts.Services.Usecase.Export(export);
        }

        protected virtual void OnStatusUpdate(EventArgs<String> eventArgs)
        {
            if (StatusUpdate != null)
            {
                StatusUpdate(this, eventArgs);
            }
        }

        private void UsecaseGrid_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {
            
            foreach (DataGridViewRow r in UsecaseGrid.Rows)
            {
               
                var cell = r.Cells[1] as DataGridViewTextBoxCell;
                if (cell != null)
                {
                   // this.Cursor = Cursors.Hand;
                    string text = Convert.ToString(cell.Value);
                    if (text.Contains("Untitled-"))
                    {
                      
               // lc.Description = "Edit";
                //lc.ToolTipText = "Edit";
             
                        //lc.Value = new Bitmap(@"Images\edit.png");
               //lc.Value = new Bitmap(@"Images\red.png"); ;

               // UsecaseGrid[2, r.Index] = lc;
             // DataGridViewLinkCell lc1 = new DataGridViewLinkCell();
                       
                //lc1.Value = "";
                //UsecaseGrid[3, r.Index] = lc1;
           
                //DataGridViewLinkCell lc2 = new DataGridViewLinkCell();
                //lc2.Value = "";
                //UsecaseGrid[4, r.Index] = lc2;
               
                      
                     
                    }
                }

            }
            UsecaseGrid.Columns[0].Width = 30;
            UsecaseGrid.Columns[1].ReadOnly = true;
            UsecaseGrid.Columns[2].Width = 50;
            UsecaseGrid.Columns[3].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            //UsecaseGrid.Columns[4].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
        }


        private string ExportToCsvUseCase(int rowindex)
        {
            string filename = usecases.ElementAt(rowindex).filename;

            return filename;


        }
        private string GetFilePath(int rowindex)
        {
            string filepath = usecases.ElementAt(rowindex).filepath;

            return filepath;


        }
       //Events for context menu click in Shell
        
        [EventSubscription(EventTopicNames.Delete, ThreadOption.UserInterface)]
        public void OnDelete(object sender, EventArgs e)
        {
            bool Ischecked = false;
            bool isSuccess = false;
            this.label1.Focus();
            TreeNode rootNode = treeUsecase.Nodes[0];
            if (treeUsecase.Nodes.Count == 0) { 
                //return false; 
            }
            foreach (TreeNode childNode in rootNode.Nodes)
            {
                if (childNode.Checked)
                {
                    Ischecked = true;
                    break;
                }
               
            }
            
            //foreach (DataGridViewRow dr in UsecaseGrid.Rows)
            //{
            //    var cell = dr.Cells[0] as DataGridViewCheckBoxCell;
            //    if (Convert.ToBoolean(cell.Value) == true)
            //    {
            //        string UsecaseName = ExportToCsvUseCase(dr.Index);
            //        usecaseFilenames.Add(UsecaseName);
            //        Ischecked = true;
            //    }
            //}
            
            if (Ischecked)
            {
                var confirmResult = MessageBox.Show(ConstantNames.MSG_DEL,ConstantNames.CONFIRM, MessageBoxButtons.OKCancel);
                if (confirmResult == DialogResult.OK)
                {
                    foreach (TreeNode childNode in rootNode.Nodes)
                    {
                        if (childNode.Checked)
                        {
                            string UsecaseName = ExportToCsvUseCase(childNode.Index);
                            string IDEFilename = usecases.ElementAt(childNode.Index).usecaseName;

                            isSuccess = DeleteScripts(UsecaseName, IDEFilename);
                        }
                      

                    }
                    //foreach (DataGridViewRow dr in UsecaseGrid.Rows)
                    //{
                    //    var cell = dr.Cells[0] as DataGridViewCheckBoxCell;
                    //    if (Convert.ToBoolean(cell.Value) == true)
                    //    {
                    //        string UsecaseName = ExportToCsvUseCase(dr.Index);
                    //        string IDEFilename = usecases.ElementAt(dr.Index).usecaseName;

                    //        isSuccess = DeleteScripts(UsecaseName, IDEFilename);

                    //    }
                    //}
                }

                if (isSuccess)
                {
                    MessageBox.Show("Scripts Deleted.", ConstantNames.FRONTEND, MessageBoxButtons.OK, MessageBoxIcon.Information);
                    foreach (TreeNode childNode in rootNode.Nodes)
                    {
                        if (childNode.Checked)
                        {

                            childNode.Checked = false;
                        }
                    }
                }
            }
            else
            {
                MessageBox.Show("Please select scripts to delete", ConstantNames.FRONTEND, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
        [EventSubscription(EventTopicNames.ClickStream, ThreadOption.UserInterface)]
        public void OnClickStream(object sender, EventArgs e)
        {
            
            
            bool Ischecked = false;
            //dgvColumnHeader.CheckAll = false;
            this.label1.Focus();
            string applicationfilter = applicationToolStripMenuItem.Text;
            usecaseFilenames.Clear();
            //foreach (DataGridViewRow dr in UsecaseGrid.Rows)
            //{
            //    var cell = dr.Cells[0] as DataGridViewCheckBoxCell;
            //    if (Convert.ToBoolean(cell.Value) == true)
            //    {
            //        string UsecaseName = ExportToCsvUseCase(dr.Index);
            //        usecaseFilenames.Add(UsecaseName);
            //        Ischecked = true;
            //    }
            //}
            TreeNode rootNode = treeUsecase.Nodes[0];
            if (treeUsecase.Nodes.Count == 0)
            {
                //return false; 
            }
            foreach (TreeNode childNode in rootNode.Nodes)
            {
                if (childNode.Checked)
                {
                    Ischecked = true;
                    string UsecaseName = ExportToCsvUseCase(childNode.Index);
                  usecaseFilenames.Add(UsecaseName);
                }
                

            }
            if (Ischecked)
            {
                dataForApplicationEvents = DataExtraction.Extract(DataExtractionType.ApplicationsUsage, usecaseFilenames);
                dataForApplicationPath = DataExtraction.Extract(DataExtractionType.ApplicationPath, usecaseFilenames);
                dataForControlPath = DataExtraction.Extract(DataExtractionType.ControlPath, usecaseFilenames);
                dataForScreenPath = DataExtraction.Extract(DataExtractionType.ScreenPath, usecaseFilenames);

                if (dataForApplicationEvents.Count > 0)
                {
                    IMSWorkBench.Scripts.Services.Usecase.Export(dataForApplicationEvents, "Application Usage");
                }
                if (dataForApplicationPath.Count > 0)
                {
                    IMSWorkBench.Scripts.Services.Usecase.Export(dataForApplicationPath, "Application Path");
                }
                if (dataForControlPath.Count > 0)
                {
                    IMSWorkBench.Scripts.Services.Usecase.Export(dataForControlPath, "Control Path");
                }
                if (dataForScreenPath.Count > 0)
                {
                    IMSWorkBench.Scripts.Services.Usecase.Export(dataForScreenPath, "Screen Path");
                }
            }
            else
            {
                MessageBox.Show("Please select scripts to export", ConstantNames.FRONTEND, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            if (usecaseFilenames.Count > 0)
            {
                MessageBox.Show("Analysis data exported.", ConstantNames.FRONTEND, MessageBoxButtons.OK, MessageBoxIcon.Information);
                //uncheck the header checkbox
                //for (int i = 0; i < UsecaseGrid.Rows.Count; i++)
                //{
                //    dgvColumnHeader.CheckAll = false;
                //    this.label1.Focus();
                //    UsecaseGrid.Rows[i].Cells[0].Value = dgvColumnHeader.CheckAll;
                //}
                //this.Invalidate();
                //var cell = (DGVColumnHeader)UsecaseGrid.Columns[0].HeaderCell;
                //cell.Value = false;
                foreach (TreeNode childNode in rootNode.Nodes)
                {
                    if (childNode.Checked)
                    {
                        childNode.Checked = false;
                    }
                }

            }
        }
        [EventSubscription(EventTopicNames.AllData, ThreadOption.UserInterface)]
        public void AllData(object sender, EventArgs e)
        {
            bool Ischecked = false;
            this.label1.Focus();
            dgvColumnHeader.CheckAll = false;
            string applicationfilter = allDataToolStripMenuItem.Text;
            usecaseFilenames.Clear();
            //foreach (DataGridViewRow dr in UsecaseGrid.Rows)
            //{
            //    var cell = dr.Cells[0] as DataGridViewCheckBoxCell;
            //    if (Convert.ToBoolean(cell.Value) == true)
            //    {
            //        string UsecaseName = ExportToCsvUseCase(dr.Index);
            //        usecaseFilenames.Add(UsecaseName);
            //        Ischecked = true;
            //    }
            //}
            TreeNode rootNode = treeUsecase.Nodes[0];
            if (treeUsecase.Nodes.Count == 0)
            {
                //return false; 
            }
            foreach (TreeNode childNode in rootNode.Nodes)
            {
                if (childNode.Checked)
                {
                    Ischecked = true;
                    string UsecaseName = ExportToCsvUseCase(childNode.Index);
                    usecaseFilenames.Add(UsecaseName);
                }
            }
            if (Ischecked)
            {
                dataForApplicationEvents = DataExtraction.Extract(DataExtractionType.All, usecaseFilenames);
                if (dataForApplicationEvents.Count > 0)
                {
                    IMSWorkBench.Scripts.Services.Usecase.Export(dataForApplicationEvents, applicationfilter);
                   // MessageBox.Show("Analysis data exported.", "Frontend Automation", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    //for (int i = 0; i < UsecaseGrid.Rows.Count; i++)
                    //{
                    //    dgvColumnHeader.CheckAll = false;
                    //    this.label1.Focus();
                    //    UsecaseGrid.Rows[i].Cells[0].Value = dgvColumnHeader.CheckAll;
                    //}
                    //this.Invalidate();
                    //var cell = (DGVColumnHeader)UsecaseGrid.Columns[0].HeaderCell;
                    //cell.Value = false;

                }
            }
            else
            {
                MessageBox.Show("Please select scripts to export", ConstantNames.FRONTEND, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            if (usecaseFilenames.Count > 0)
            {
                MessageBox.Show("Analysis data exported.", ConstantNames.FRONTEND, MessageBoxButtons.OK, MessageBoxIcon.Information);
                //uncheck header checkbox
                //for (int i = 0; i < UsecaseGrid.Rows.Count; i++)
                //{
                //    dgvColumnHeader.CheckAll = false;
                //    this.label1.Focus();
                //    UsecaseGrid.Rows[i].Cells[0].Value = dgvColumnHeader.CheckAll;
                //}
                //this.Invalidate();
                //var cell = (DGVColumnHeader)UsecaseGrid.Columns[0].HeaderCell;
                //cell.Value = false;
                foreach (TreeNode childNode in rootNode.Nodes)
                {
                    if (childNode.Checked)
                    {

                        childNode.Checked = false;
                    }
                }

            }
        }
       
        //Method for deleting the scrip and their files
        private bool DeleteScripts(string UsecaseName,string IDEFilename)
        {
            bool IsSuccess = false;
            string FileToDelete = ConfigurationManager.AppSettings["UsecaseLocation"];
            string IDEFiles = ConfigurationManager.AppSettings["IDEProjects"];
            string FolderToDelete = ConfigurationManager.AppSettings["ProjectHome"];
            string UsecasePath = FileToDelete + "\\" + UsecaseName;
            string foldername = UsecaseName.ToLower().Replace(".atrwb", "");
            string Usecasefolder = FolderToDelete + "\\" + foldername + ".sikuli";
            string IDEFilepath = IDEFiles + "\\" + IDEFilename + ".py";
            string IDEUsecasepath = FileToDelete + "\\" + IDEFilename+".atrwb";
            //string IDEFiles=IDEFiles
            //delete the files
            if ((System.IO.File.Exists(IDEUsecasepath)))
            {
                System.IO.File.Delete(IDEUsecasepath);
                IsSuccess = true;
            }
            if ((System.IO.File.Exists(IDEFilepath)))
            {
                System.IO.File.Delete(IDEFilepath);
                IsSuccess = true;
            }
            if ((System.IO.File.Exists(UsecasePath)))
            {
                System.IO.File.Delete(UsecasePath);
                IsSuccess = true;
            }
            //delete the folder
            if (Directory.Exists(Usecasefolder))
            {
                Directory.Delete(Usecasefolder, true);
                IsSuccess = true;
            }
            return IsSuccess;
        }
        //Event for CheckAll in the checkbox header
        private void UsecaseGrid_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            this.label1.Focus();
            if (e.ColumnIndex == 0)
            {
                for (int i = 0; i < UsecaseGrid.Rows.Count; i++)
                {
                    UsecaseGrid.Rows[i].Cells[0].Value = dgvColumnHeader.CheckAll;
                }
            }
        }
        //Event to uncheck the header if any of the checkbox is unchecked
        private void UsecaseGrid_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            //    if (e.ColumnIndex == 0)
            //    {
            //        var cell = (DGVColumnHeader)UsecaseGrid.Columns[0].HeaderCell;
            //        cell.Value=false;
            //        //bool s = cell.CheckAll;
            //        //if (s)
            //        //{
            //        //    dgvColumnHeader.CheckAll = false;
            //        //}
            //    }
        }
        //**********Below code is for context menu click in Playback(no longer used)*****
        //private void applicationRelationsToolStripMenuItem_Click(object sender, EventArgs e)
        //{
        //    this.label1.Focus();
        //    string applicationfilter = applicationRelationsToolStripMenuItem.Text;
        //    usecaseFilenames.Clear();
        //    foreach (DataGridViewRow dr in UsecaseGrid.Rows)
        //    {
        //        var cell = dr.Cells[0] as DataGridViewCheckBoxCell;

        //        if (Convert.ToBoolean(cell.Value) == true)
        //        {
        //           string  UsecaseName = ExportToCsvUseCase(dr.Index);
        //            usecaseFilenames.Add(UsecaseName);
        //        }
        //    }
        //    dataForApplicationEvents = DataExtraction.Extract(DataExtractionType.ApplicationPath, usecaseFilenames);
        //    if (dataForApplicationEvents.Count > 0)
        //    {
        //        IMSWorkBench.Scripts.Services.Usecase.Export(dataForApplicationEvents, applicationfilter);
        //        MessageBox.Show("Analysis data exported.", "Frontend Automation", MessageBoxButtons.OK, MessageBoxIcon.Information);
        //        foreach (DataGridViewRow dr in UsecaseGrid.Rows)
        //        {
        //            dr.SetValues(false);
        //        }
        //    }
        //    else
        //    {
        //        MessageBox.Show("Please select scripts to export", "Frontend Automation", MessageBoxButtons.OK, MessageBoxIcon.Information);
        //    }
        //}
        private void DeleteToolStripMenu_Click(object sender, EventArgs e)
        {
            bool isSuccess = false;
            this.label1.Focus();
            var confirmResult = MessageBox.Show(ConstantNames.MSG_DEL,ConstantNames.CONFIRM, MessageBoxButtons.OKCancel);
            if (confirmResult == DialogResult.OK)
            {
                foreach (DataGridViewRow dr in UsecaseGrid.Rows)
                {
                    var cell = dr.Cells[0] as DataGridViewCheckBoxCell;
                    if (Convert.ToBoolean(cell.Value) == true)
                    {
                        string UsecaseName = ExportToCsvUseCase(dr.Index);
                        string IDEFilename = usecases.ElementAt(dr.Index).usecaseName;
                        isSuccess = DeleteScripts(UsecaseName, IDEFilename);

                    }
                }
            }

            if (isSuccess)
            {
                MessageBox.Show("Scripts Deleted.", "Frontend Automation", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
        private void applicationToolStripMenuItem_Click(object sender, EventArgs e)
        {
            bool Ischecked = false;
            //dgvColumnHeader.CheckAll = false;
            this.label1.Focus();
            string applicationfilter = applicationToolStripMenuItem.Text;
            usecaseFilenames.Clear();
            foreach (DataGridViewRow dr in UsecaseGrid.Rows)
            {
                var cell = dr.Cells[0] as DataGridViewCheckBoxCell;
                if (Convert.ToBoolean(cell.Value) == true)
                {
                    string UsecaseName = ExportToCsvUseCase(dr.Index);
                    usecaseFilenames.Add(UsecaseName);
                    Ischecked = true;
                }
            }
            if (Ischecked)
            {
                dataForApplicationEvents = DataExtraction.Extract(DataExtractionType.ApplicationsUsage, usecaseFilenames);
                dataForApplicationPath = DataExtraction.Extract(DataExtractionType.ApplicationPath, usecaseFilenames);
                dataForControlPath = DataExtraction.Extract(DataExtractionType.ControlPath, usecaseFilenames);
                dataForScreenPath = DataExtraction.Extract(DataExtractionType.ScreenPath, usecaseFilenames);

                if (dataForApplicationEvents.Count > 0)
                {
                    IMSWorkBench.Scripts.Services.Usecase.Export(dataForApplicationEvents, "Application Usage");
                }
                if (dataForApplicationPath.Count > 0)
                {
                    IMSWorkBench.Scripts.Services.Usecase.Export(dataForApplicationPath, "Application Path");
                }
                if (dataForControlPath.Count > 0)
                {
                    IMSWorkBench.Scripts.Services.Usecase.Export(dataForControlPath, "Control Path");
                }
                if (dataForScreenPath.Count > 0)
                {
                    IMSWorkBench.Scripts.Services.Usecase.Export(dataForScreenPath, "Screen Path");
                }
            }
            else
            {
                MessageBox.Show("Please select scripts to export", ConstantNames.FRONTEND, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            if (usecaseFilenames.Count > 0)
            {
                MessageBox.Show("Analysis data exported.", ConstantNames.FRONTEND, MessageBoxButtons.OK, MessageBoxIcon.Information);

                for (int i = 0; i < UsecaseGrid.Rows.Count; i++)
                {
                    dgvColumnHeader.CheckAll = false;
                    this.label1.Focus();
                    UsecaseGrid.Rows[i].Cells[0].Value = dgvColumnHeader.CheckAll;
                }
                this.Invalidate();
                var cell = (DGVColumnHeader)UsecaseGrid.Columns[0].HeaderCell;
                cell.Value = false;

            }
        }

        //private void applicationEventsToolStripMenuItem_Click(object sender, EventArgs e)
        //{
        //    this.label1.Focus();
        //    string applicationfilter=applicationEventsToolStripMenuItem.Text;
        //    usecaseFilenames.Clear();
        //    foreach (DataGridViewRow dr in UsecaseGrid.Rows)
        //    {
        //        var cell = dr.Cells[0] as DataGridViewCheckBoxCell;
        //        if (Convert.ToBoolean(cell.Value) == true)
        //        {
        //            string UsecaseName = ExportToCsvUseCase(dr.Index);
        //            usecaseFilenames.Add(UsecaseName);
        //        }
        //    }

        //    dataForControlPath = DataExtraction.Extract(DataExtractionType.ControlPath, usecaseFilenames);
        //   if (dataForApplicationEvents.Count > 0)
        //   {
        //       IMSWorkBench.Scripts.Services.Usecase.Export(dataForApplicationEvents, applicationfilter);
        //       MessageBox.Show("Analysis data exported.", "Frontend Automation", MessageBoxButtons.OK, MessageBoxIcon.Information);
        //       foreach (DataGridViewRow dr in UsecaseGrid.Rows)
        //       {
        //           dr.SetValues(false);
        //       }
        //   }
        //   else
        //   {
        //       MessageBox.Show("Please select scripts to export", "Frontend Automation", MessageBoxButtons.OK, MessageBoxIcon.Information);
        //   }
        //}

        private void toolStripButton1_Click(object sender, EventArgs e)
        {
            this._presenter.OnRun(e);
        }

        private void toolStripButton2_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow dr in UsecaseGrid.Rows)
            {
                var cell = dr.Cells[0] as DataGridViewCheckBoxCell;
                if (Convert.ToBoolean(cell.Value) == true)
                {

                    ExportToCsv(dr.Index);
                }
            }
            if (export.Count > 0)
            {
                IMSWorkBench.Scripts.Services.Usecase.Export(export);
                MessageBox.Show("Scripts exported", ConstantNames.FRONTEND, MessageBoxButtons.OK, MessageBoxIcon.Information);
                foreach (DataGridViewRow dr in UsecaseGrid.Rows)
                {
                    dr.SetValues(false);
                }
            }
        }
        private void aLLToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.label1.Focus();

            foreach (DataGridViewRow dr in this.UsecaseGrid.Rows)
            {
                var cell = dr.Cells[0] as DataGridViewCheckBoxCell;
                if (Convert.ToBoolean(cell.Value) == true)
                {

                    ExportToCsv(dr.Index);
                }
            }
            if (export.Count > 0)
            {
                IMSWorkBench.Scripts.Services.Usecase.Export(export);
                MessageBox.Show("Analysis data exported.", ConstantNames.FRONTEND, MessageBoxButtons.OK, MessageBoxIcon.Information);

                foreach (DataGridViewRow dr in UsecaseGrid.Rows)
                {

                    dr.SetValues(false);
                }
            }
            else
            {
                MessageBox.Show("Please select scripts to export", ConstantNames.FRONTEND, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        //private void screenPath_Click(object sender, EventArgs e)
        //{
        //    this.label1.Focus();
        //    string applicationfilter = screenPath.Text;
        //    usecaseFilenames.Clear();
        //    foreach (DataGridViewRow dr in UsecaseGrid.Rows)
        //    {
        //        var cell = dr.Cells[0] as DataGridViewCheckBoxCell;
        //        if (Convert.ToBoolean(cell.Value) == true)
        //        {
        //            string UsecaseName = ExportToCsvUseCase(dr.Index);
        //            usecaseFilenames.Add(UsecaseName);
        //        }
        //    }

        //    dataForApplicationEvents = DataExtraction.Extract(DataExtractionType.ScreenPath, usecaseFilenames);
        //    if (dataForApplicationEvents.Count > 0)
        //    {
        //        IMSWorkBench.Scripts.Services.Usecase.Export(dataForApplicationEvents, applicationfilter);
        //        MessageBox.Show("Analysis data exported.", "Frontend Automation", MessageBoxButtons.OK, MessageBoxIcon.Information);
        //        foreach (DataGridViewRow dr in UsecaseGrid.Rows)
        //        {
        //            dr.SetValues(false);
        //        }
        //    }
        //    else
        //    {
        //        MessageBox.Show("Please select scripts to export", "Frontend Automation", MessageBoxButtons.OK, MessageBoxIcon.Information);
        //    }
        //}

        private void allDataToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.label1.Focus();
            dgvColumnHeader.CheckAll = false;
            string applicationfilter = allDataToolStripMenuItem.Text;
            usecaseFilenames.Clear();
            foreach (DataGridViewRow dr in UsecaseGrid.Rows)
            {
                var cell = dr.Cells[0] as DataGridViewCheckBoxCell;
                if (Convert.ToBoolean(cell.Value) == true)
                {
                    string UsecaseName = ExportToCsvUseCase(dr.Index);
                    usecaseFilenames.Add(UsecaseName);
                }
            }

            dataForApplicationEvents = DataExtraction.Extract(DataExtractionType.All, usecaseFilenames);
            if (dataForApplicationEvents.Count > 0)
            {
                IMSWorkBench.Scripts.Services.Usecase.Export(dataForApplicationEvents, applicationfilter);
                MessageBox.Show("Analysis data exported.", ConstantNames.FRONTEND, MessageBoxButtons.OK, MessageBoxIcon.Information);
                for (int i = 0; i < UsecaseGrid.Rows.Count; i++)
                {
                    dgvColumnHeader.CheckAll = false;
                    this.label1.Focus();
                    UsecaseGrid.Rows[i].Cells[0].Value = dgvColumnHeader.CheckAll;
                }
                this.Invalidate();
                var cell = (DGVColumnHeader)UsecaseGrid.Columns[0].HeaderCell;
                cell.Value = false;

            }
            else
            {
                MessageBox.Show("Please select scripts to export", ConstantNames.FRONTEND, MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

        }

        private void toolStripButton3_Click(object sender, EventArgs e)
        {
            this._presenter.OnOpen(e);
            

        }
        //***********End of context menu code in Playback.cs*****************

        private void UsecaseGrid_CellMouseEnter(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex < 0 || e.RowIndex < 0)
            {
                return;
            }
            var dataGridView = (sender as DataGridView);
            //if (e.ColumnIndex == dataGridView.Columns[2].Index)
            //{
            //    var cell = dataGridView.Rows[e.RowIndex].Cells[e.ColumnIndex] as DataGridViewImageCell;
            //    string cellval = Convert.ToString(cell.Value);
            //}
            //Check the condition as per the requirement casting the cell value to the appropriate type
            if ((e.ColumnIndex == 2) || (e.ColumnIndex==3) ||(e.ColumnIndex==4))
            {
                dataGridView.Cursor = Cursors.Hand;
            }
            else
            {
                dataGridView.Cursor = Cursors.Arrow; ;
            }
        }

        private void editToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (treeUsecase.SelectedNode != null)
                if (treeUsecase.SelectedNode.Parent != null)
                {
                    int index = treeUsecase.SelectedNode.Index;
                    string title = treeUsecase.SelectedNode.Text;
                    if (!title.Contains("Untitled-"))
                    {

                        this._presenter.OnEdit(new EditEventArgs { filePath = usecases.ElementAt(index).filepath, fileName = usecases.ElementAt(index).usecaseName });

                    }
                }
        }


        private void executeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (treeUsecase.SelectedNode != null)
            {
                if (treeUsecase.SelectedNode.Parent != null)
                {
                    int index = treeUsecase.SelectedNode.Index;
                    string title = treeUsecase.SelectedNode.Text;
                    string selectedExecutemethod = string.Empty;
                    if (!title.Contains("Untitled-"))
                    {
                        List<string> Options = new List<string>();
                       string filePath = usecases.ElementAt(index).filepath;
                       string UsecaseName = usecases.ElementAt(index).usecaseName;
                       string fileName = usecases.ElementAt(index).filename;
                     Options= FindExecuteOptions(filePath, UsecaseName, fileName);
                     if (Options.Count != 0)
                     {
                         if (Options.Count > 1)
                         {
                             ExecuteDialog ExecuteOptions = new ExecuteDialog(Options);
                             ExecuteOptions.ShowDialog();
                             selectedExecutemethod = ExecuteOptions.TheValue;
                         }
                         else
                         {
                             selectedExecutemethod = Options[0].ToString();
                         }
                     }
                        this._presenter.OnExecute(new EditEventArgs { filePath = filePath, ExecuteOption = selectedExecutemethod, fileName = fileName, UsecaseName = UsecaseName });
                    }
                }
            }
        }
        private List<string> FindExecuteOptions(string filepath, string UsecaseName, string fileName)
        {
            fileName = fileName.Replace(".atrwb", "");
            List<string> ListofFiles = new List<string>();
            string IDEFiles = ConfigurationManager.AppSettings["IDEProjects"];
            string IDEfilepath = IDEFiles + UsecaseName + ".py";
            string SikuliFiles = ConfigurationManager.AppSettings["ProjectHome"];
            string sikulifilepath = SikuliFiles + fileName + ".sikuli" + "\\" + fileName + ".py";
            //check for sikuli files
            if (File.Exists(sikulifilepath))
            {
                ListofFiles.Add(ConstantNames.EXECUTE_SIKULI);
            }
            //check for IDE Files
            if (File.Exists(IDEfilepath))
            {
                ListofFiles.Add(ConstantNames.EXECUTE_PYTHON);
            }
            //check for ATRFile path
            if (File.Exists(filepath))
            {
                //check if dummy ATR file or not
              bool IsATRXML=  CheckifATRXML(filepath);
              if (IsATRXML)
              {
                  ListofFiles.Add(ConstantNames.EXECUTE_ATR);
              }
            }
            return ListofFiles;
        }
        private void deleteToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (treeUsecase.SelectedNode != null)
            {
                if (treeUsecase.SelectedNode.Parent != null)
                {
                    int index = treeUsecase.SelectedNode.Index;
                    string title = treeUsecase.SelectedNode.Text;
                    if (!title.Contains("Untitled-"))
                    {
                        bool isSuccess = false;
                        string filePath = usecases.ElementAt(index).filename;
                        string IDEfiles = usecases.ElementAt(index).usecaseName;
                        var confirmResult = MessageBox.Show(ConstantNames.MSG_DEL, ConstantNames.CONFIRM, MessageBoxButtons.OKCancel);
                        if (confirmResult == DialogResult.OK)
                        {
                            isSuccess = DeleteScripts(filePath, IDEfiles);
                            treeUsecase.Nodes.Remove(treeUsecase.SelectedNode);
                            treeUsecase.ExpandAll();
                        }
                        else
                        {

                        }

                        if (isSuccess)
                        {
                            MessageBox.Show("Script Deleted",ConstantNames.FRONTEND, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        }
                    }
                }
            }
        }

        private void treeUsecase_AfterExpand(object sender, TreeViewEventArgs e)
        {
            if (e.Node.Index == 0)
            {
                e.Node.ImageIndex = 1;
            }
        }
        private void treeUsecase_AfterCollapse(object sender, TreeViewEventArgs e)
        {
            if (e.Node.Index == 0)
            {
                e.Node.ImageIndex = 0;
            }
        }

        private void treeUsecase_BeforeExpand(object sender, TreeViewCancelEventArgs e)
        {
            if (e.Node.Index == 0)
            {
                e.Node.ImageIndex = 0;
            }

        }

        private void treeUsecase_AfterCheck(object sender, TreeViewEventArgs e)
        {
           
            if(e.Node.Text=="Scripts")
            {
                TreeNode rootNode = treeUsecase.Nodes[0];
                if (rootNode.Checked)
                {
                    rootChecked = true;
                    foreach (TreeNode node in rootNode.Nodes)
                    {
                        node.Checked = true;
                    }
                }
                else
                {
                   
                    foreach (TreeNode node in rootNode.Nodes)
                    {
                        node.Checked = false;
                    }
                }
               

            }
        }

       
       
    }

    public class StringValue
    {
        public StringValue(string s)
        {
            _value = s;
        }
        public string Usecase { get { return _value; } set { _value = value; } }
        string _value;
    }


    public class ApplicationEventArgs : EventArgs
    {
        public List<string> ApplicationList { get; set; }
        public UseCase UseCaseCaptured { get; set; }
    }

    public class EditEventArgs : EventArgs
    {
        public string filePath { get; set; }
        public string fileName { get; set; }
        public string UsecaseName { get; set; }
        public string ExecuteOption { get; set; }
    }
    public class DeleteEventArgs : EventArgs
    {
        public string filePath { get; set; }
    }


    public class Grid
    {
        // 
        public string Script { get; set; }
        public System.Drawing.Image Edit { get { return new Bitmap(@"Images\edit.png"); } }//Edit
        //public Image Edit { get; set; }
        public System.Drawing.Image Execute { get { return new Bitmap(@"Images\next.png"); } } 
        //public string Execute { get { return ""; } }//new Run();
        public System.Drawing.Image Delete { get { return new Bitmap(@"Images\delete.png"); } }//public string Delete { get { return "Delete"; } }//Delete
        public bool Check { get; set; }
    }

    public enum Run
    {
        Sikuli,
        Playback
    }
}

