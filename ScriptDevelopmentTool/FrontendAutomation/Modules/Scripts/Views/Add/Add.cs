//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// 
//
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using IMSWorkBench.Infrastructure.Interface;
using System.Diagnostics;
using Lib = IMSWorkBench.Infrastructure.Library.Services;
using Infosys.ATR.UIAutomation.SEE;
using Infosys.ATR.UIAutomation.Entities;
using System.Text;
using System.Linq;
using System.Xml;
using System.Xml.Linq;

namespace IMSWorkBench.Scripts
{
    public partial class Add : UserControl, IAdd
    {
        private PlayActions action;
        private int _pid;
        private IntPtr _handle;
        private XDocument _useCase;
        private StringBuilder _sb;
        private RecordActions _recordactions;

        public XDocument EditUseCase
        {             
            set {
                _useCase = value;
                var root = _useCase.Root;
                UseCase usecase = SerializeAndDeserialize.Deserialize(root.ToString(), typeof(UseCase)) as UseCase;
                _handle = Lib.Win32.Dockit(this.panel2.Handle, usecase.Activities[0].TargetApplication.ApplicationExe, 
                    String.Empty, out _pid);                
                
                action = new Infosys.ATR.UIAutomation.SEE.PlayActions(usecase);                
                action.ReadyToExecute += new PlayActions.ReadyToExecuteEventHandler(action_ReadyToExecute);
                action.InitiatePlayBack();     
            }
        }

        public Add()
        {
            InitializeComponent();
            _sb = new StringBuilder();
            _recordactions = new RecordActions();
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            base.OnLoad(e);
        }

        void action_ReadyToExecute(PlayActions.ReadyToExecuteEventArgs e)
        {
            action.ExecuteActionsOn(e.Application, _handle, _pid);          

        }

        private void button1_Click(object sender, EventArgs e)
        {
            RecordEvents();
        }

        [STAThread]
        private void RecordEvents()
        {
            _recordactions.AnyUserEvent += new RecordActions.AnyUserEventHandler(recordactions_AnyUserEvent);
            _recordactions.Start(true);
        }

        void recordactions_AnyUserEvent(RecordActions.AnyUserEventArgs e)
        {
            _sb.Append(e.EventDesc);
        }

        private void button2_Click(object sender, EventArgs e)
        {
            StopRecording();
        }

        private void StopRecording()
        {
            //Infosys.ATR.UIAutomation.Entities.UseCase uc = _recordactions.UseCase;            
            //var activities = uc.Activities.All(a => a.Tasks.Count > 0);
            //string events = _recordactions.Start(false);

            //XElement element = new XElement("Activity");
            //element.Attribute.

            //var activities =  SerializeAndDeserialize.Deserialize(events, typeof(UseCase));
            
            //_useCase.Add(activities);
            //useCase.Save(@"d:\runtime.atrwb");
           // System.IO.File.WriteAllText(@"d:\usecase1.atrwb", usecasexml);
        }


    }
}

