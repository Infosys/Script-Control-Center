//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// 
//
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using IMSWorkBench.Infrastructure.Interface;
using IMSWorkBench.Infrastructure.Library.UI;
using Microsoft.Practices.CompositeUI.WinForms;
using IMSWorkBench.Scripts.Constants;
using Microsoft.Practices.CompositeUI.EventBroker;
using Lib = IMSWorkBench.Infrastructure.Library.Services;
using System.Threading;
using Infosys.ATR.UIAutomation.Entities;
using System.Collections.Generic;
using System.Drawing;
using System.Diagnostics;
using System.Windows.Automation;
using System.ComponentModel;
using ICT = Infosys.Collaboration.CtxtMgmt.Core;
using System.Configuration;
using Infosys.ATR.ScriptEditor;
using Infosys.ATR.UIAutomation.Recorder;
using IMSWorkBench.Scripts.Views.ScriptsLayout;
using System.Xml.Linq;
using System.Linq;
using Infosys.ATR.DevelopmentStudio;
using System.Windows.Forms.Integration;
using System.IO;
using System.Text;
using Infosys.ATR.UIAutomation.SEE;
using IMSWorkBench.Scripts.Entities;

namespace IMSWorkBench.Scripts
{
    public partial class ScriptsLayout : UserControl, IScriptsLayout
    {
        [EventPublication(EventTopicNames.StopRecording, PublicationScope.Global)]
        public event EventHandler<EventArgs> StopRecording;

        [EventPublication(EventTopicNames.Record, PublicationScope.Global)]
        public event EventHandler<EventArgs> Record;

        [EventPublication(EventTopicNames.StatusUpdate, PublicationScope.Global)]
        public event EventHandler<EventArgs> StatusUpdate;

        private Dictionary<String, TabPage> apps = null;
        System.Timers.Timer timer;        
        private Infosys.ATR.UIAutomation.SEE.PlayActions action = null;
        private BackgroundWorker bw = null;
        private IntPtr cHandle = IntPtr.Zero;        
        bool playbackReady = false;
        WebBrowser b = null;
        DateTime lastDocumentCompletedAt = new DateTime();
        Form1 recoder = null;
        private string filePath = "";
        private string fileName = "";
        ShowProgress progress = null;
        bool scripting = false;

        //public DeckWorkspace EditWorkspace
        //{
        //    get { return _scriptsWorkspace; }
        //}

        public DeckWorkspace ScriptsWorksspace
        {
            get { return deckWorkspace1; }
        }

        public ScriptsLayout()
        {
            InitializeComponent();
            this.splitContainer1.SplitterDistance = 175;
            ShowDetails.Visible = false;
            HideDetails.Visible = true;
            System.Windows.Forms.ToolTip ToolTipForShowButton = new System.Windows.Forms.ToolTip();
            ToolTipForShowButton.SetToolTip(this.ShowDetails, "Show Panel");
            System.Windows.Forms.ToolTip ToolTipForHidebutton = new System.Windows.Forms.ToolTip();
            ToolTipForHidebutton.SetToolTip(this.HideDetails, "Hide Panel");
            splitContainer1.SplitterMoved += new System.Windows.Forms.SplitterEventHandler(splitContainer1_SplitterMoved);
            
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            base.OnLoad(e);
      
          
        }

        void bw_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            //Win32.SetParent(cHandle, this.splitContainer1.Panel1.Handle);
            ////   Win32.MoveWindow(cHandle, 0, 0, this.panel3.Width, this.panel3.Height, false);
            //Win32.ShowWindow(cHandle, ShowWindowCommands.Normal);
        }

        void bw_DoWork(object sender, DoWorkEventArgs e)
        {
            //string ict = ConfigurationManager.AppSettings["Buzz"];
            //int i = 0;
            //cHandle = Win32.GetHandle(ict, string.Empty, out i);
            //Thread.Sleep(1000);
            ShowProgress p = new ShowProgress();
            while (scripting)
            {
               p.ShowDialog();
            }

            p.Close();
        }

        void LaunchSikuli()
        {
            string file = System.IO.Path.GetFileNameWithoutExtension(filePath);
            //TabPage t = new TabPage(GetUseCaseName(filePath));
            tabControl1.DrawMode = TabDrawMode.OwnerDrawFixed;
            string filename = GetUseCaseName(filePath);
            TabPage t;
            if (filename.Length > 10)
            {
                char pad = '.';
                string texttoPad = filename.Substring(0, (filename.Length < 10) ? filename.Length : 10);
                texttoPad = texttoPad.PadRight(12, pad);
                t = new TabPage(texttoPad);
            }
            else
            {
                t = new TabPage(filename);
            }
            tabControl1.SizeMode = TabSizeMode.Fixed;
            tabControl1.ItemSize = new Size(100, 20);
            this.tabControl1.ShowToolTips = true;
            t.ToolTipText = filename;
            this.tabControl1.Controls.Add(t);
            IntPtr handle = t.Handle;
            Thread sikuliLauncher = new Thread(() => Lib.Sikuli.Launch(handle, file));
            sikuliLauncher.Start();
          //  sikuliLauncher.Join();
            //Sikuli.Launch(t.Handle, file);

        }
        static IntPtr parent;
      public void LaunchStudioIDE()
        {
            PythonIDE IDELaunch = new PythonIDE();
           IDELaunch.Dock = DockStyle.Fill;
           tabControl1.DrawMode = TabDrawMode.OwnerDrawFixed;
           string folderPath = @System.Configuration.ConfigurationManager.AppSettings["FileSystemWatcher"];
           string[] fileEntries = Directory.GetFiles(folderPath, "Untitled-*.txt");
           int i = 0;
           int countofUntitled = 0;
           foreach (string files in fileEntries)
           { 
               i++;
               int j = fileEntries.Length;
              
               if (i >= j)
               {
                   string[] Untitled = files.Split('-');
                  countofUntitled = Convert.ToInt32(Untitled[1].Replace(".txt",""));
                  countofUntitled++;
               }
           }
           File.Create(folderPath+"\\Untitled-"+ countofUntitled+".txt").Dispose();
           TabPage t = new TabPage("Untitled-" + countofUntitled);
           string filename = "Untitled-" + countofUntitled;
           string text = @"<?xml version='1.0' encoding='utf-8'?><UseCase Name='Untitled-"+countofUntitled+"'></UseCase>";
          System.IO.File.WriteAllText(@"C:\Usecase\Untitled-" + countofUntitled + ".txt", text);
           if (filename.Length > 10)
           {
               char pad = '.';
               string texttoPad = filename.Substring(0, (filename.Length < 10) ? filename.Length : 10);
               texttoPad = texttoPad.PadRight(12, pad);
               t = new TabPage(texttoPad);
           }
           else
           {
               t = new TabPage(filename);
           }
           t.AutoScroll = true;
            tabControl1.SizeMode = TabSizeMode.Fixed;
            tabControl1.ItemSize = new Size(100, 20);
            this.tabControl1.ShowToolTips = true;
            t.ToolTipText = filename;
            t.Controls.Add(IDELaunch);
            this.tabControl1.Controls.Add(t);
            Lib.Win32.SetParent(IDELaunch.Handle,t.Handle);
            this.tabControl1.SelectedTab = t;
        }
      public void LaunchStudioIDE(string filepath,string filename)
      {
          if (!string.IsNullOrEmpty(filepath))
          {
              string[] path = new string[] { filepath };
              //IdeUC IDELaunch = new IdeUC(path);
              PythonIDE IDELaunch = new PythonIDE(path);
              tabControl1.DrawMode = TabDrawMode.OwnerDrawFixed;
              IDELaunch.Dock = DockStyle.Fill;

              TabPage t = new TabPage(filename);

              if (filename.Length > 10)
              {
                  char pad = '.';
                  string texttoPad = filename.Substring(0, (filename.Length < 10) ? filename.Length : 10);
                  texttoPad = texttoPad.PadRight(12, pad);
                  t = new TabPage(texttoPad);
              }
              else
              {
                  t = new TabPage(filename);
              }

              tabControl1.SizeMode = TabSizeMode.Fixed;
              tabControl1.ItemSize = new Size(100, 20);
              this.tabControl1.ShowToolTips = true;
              t.ToolTipText = filename;
              t.Controls.Add(IDELaunch);
              this.tabControl1.Controls.Add(t);
              Lib.Win32.SetParent(IDELaunch.Handle, t.Handle);
              this.tabControl1.SelectedTab = t;
          }
          else
          {
              TabPage t = new TabPage(filename);
              tabControl1.DrawMode = TabDrawMode.OwnerDrawFixed;
              if (filename.Length > 10)
              {
                  char pad = '.';
                  string texttoPad = filename.Substring(0, (filename.Length < 10) ? filename.Length : 10);
                  texttoPad = texttoPad.PadRight(12, pad);
                  t = new TabPage(texttoPad);
              }
              else
              {
                  t = new TabPage(filename);
              }
              t.AutoScroll = true;
              tabControl1.SizeMode = TabSizeMode.Fixed;
              tabControl1.ItemSize = new Size(100, 20);
              this.tabControl1.ShowToolTips = true;
              t.ToolTipText = filename;
              this.tabControl1.Controls.Add(t);
              this.tabControl1.SelectedTab = t;
          }
      }


        private string GetUseCaseName(string filePath)
        {
            XDocument xDoc = XDocument.Load(filePath);
            var useCase = xDoc.Elements("UseCase");
            return useCase.Attributes("Name").First().Value;
        }
        [EventSubscription(EventTopicNames.Open, ThreadOption.UserInterface)]
        public void OnOpen(object sender, EventArgs e) {
            LaunchStudioIDE();
        }
        [EventSubscription(EventTopicNames.RichText, ThreadOption.UserInterface)]
        public void GetRichText(object sender, EventArgs e)
        { 
            ControlExplorer exp = new ControlExplorer();
            exp.AutoStartControlExp += new ControlExplorer.AutoStartControlExpEventHandler(exp_AutoStartControlExp);
            exp.ShowDialog();
            int tabindex = tabControl1.SelectedIndex;
            if (tabindex != -1 && tabControl1.TabPages[tabindex].Controls.Count != 0)
            {
                //IdeUC IDEuserctrl = tabControl1.TabPages[tabindex].Controls[0] as IdeUC;
                PythonIDE IDEuserctrl = tabControl1.TabPages[tabindex].Controls[0] as PythonIDE;
                if (IDEuserctrl != null)
                {
                    IDEuserctrl.RichText = exp.Result;

                }
            }
        }
        [EventSubscription(EventTopicNames.Save, ThreadOption.UserInterface)]
        public void Save(object sender, EventArgs e)
        {
            string sikulifilename = string.Empty;
            string SikuliFiles = ConfigurationManager.AppSettings["ProjectHome"];
            string folderPath = @System.Configuration.ConfigurationManager.AppSettings["FileSystemWatcher"];
            int tabindex = tabControl1.SelectedIndex;
            if (tabindex != -1)
            {
                if (tabControl1.TabPages[tabindex].Controls.Count != 0)
                {
                    //IdeUC IDEuserctrl = tabControl1.TabPages[tabindex].Controls[0] as IdeUC;
                    PythonIDE IDEuserctrl = tabControl1.TabPages[tabindex].Controls[0] as PythonIDE;
                    if (IDEuserctrl != null)
                    {
                        string title = tabControl1.TabPages[tabindex].Text;
                        string tooltip = tabControl1.TabPages[tabindex].ToolTipText;
                        string text = IDEuserctrl.RichText;
                        string folderName = ConfigurationManager.AppSettings["IDEProjects"];
                        string UsecaseLocation = ConfigurationManager.AppSettings["UsecaseLocation"];
                        if (title.Contains("Untitled-"))
                        {
                            string usecaseName = Microsoft.VisualBasic.Interaction.InputBox("Provide Usecase name", "Frontend Automation");

                            if (!string.IsNullOrEmpty(usecaseName))
                            {

                                if (!Directory.Exists(folderName))
                                {
                                    Directory.CreateDirectory(folderName);
                                }
                                string filename = usecaseName + ".py";
                                string pathString = Path.Combine(folderName, filename);

                                //assign the path of the python script to the script editor, 
                                //this will be used while executing the script
                                IDEuserctrl.FilePath = pathString;

                                using (FileStream fs = File.Create(pathString))
                                {
                                    Byte[] info = new UTF8Encoding(true).GetBytes(text);
                                    fs.Write(info, 0, info.Length);
                                }
                                string texttoPad = string.Empty;
                                if (usecaseName.Length > 10)
                                {
                                    char pad = '.';
                                    texttoPad = filename.Substring(0, (filename.Length < 10) ? filename.Length : 10);
                                    texttoPad = texttoPad.PadRight(12, pad);
                                    tabControl1.TabPages[tabindex].Text = texttoPad;
                                }
                                else
                                {
                                    tabControl1.TabPages[tabindex].Text = usecaseName;
                                }

                                if (File.Exists(UsecaseLocation + "\\" + title + ".txt"))
                                    File.Delete(UsecaseLocation + "\\" + title + ".txt");
                                

                                string xmltext = @"<?xml version='1.0' encoding='utf-8'?><UseCase Name='" + usecaseName + "'></UseCase>";
                                System.IO.File.WriteAllText(UsecaseLocation + "\\" + usecaseName + ".atrwb", xmltext);
                                tabControl1.TabPages[tabindex].ToolTipText = usecaseName;
                            }
                        }
                        else
                        {

                            if (!Directory.Exists(folderName))
                            {
                                Directory.CreateDirectory(folderName);
                            }
                            //Saving IDE files
                            string filename = tabControl1.TabPages[tabindex].ToolTipText + ".py";
                            string pathString = Path.Combine(folderName, filename);
                            if(File.Exists(pathString))
                            {
                            using (FileStream fs = new FileStream(pathString, FileMode.Open, FileAccess.Write))
                            {
                                Byte[] info = new UTF8Encoding(true).GetBytes(text);
                                fs.Write(info, 0, info.Length);
                            }
                            }
                            //Find the sikuli filename and Save the file
                            List<UsecaseFile> usecases = new List<UsecaseFile>();
                            string[] filePaths = Directory.GetFiles(folderPath);
                            for (int i = 0; i < filePaths.Length; i++)
                            {
                                usecases.Add(ExtractUsecaseName(filePaths[i]));
                            }
                            foreach (UsecaseFile usecase in usecases)
                            {
                                if (usecase.usecaseName == filename)
                                {
                                    sikulifilename = usecase.filename;
                                   sikulifilename= sikulifilename.Replace(".atrwb","");
                                    break;
                                }
                            }
                          string sikulifilepath = SikuliFiles + sikulifilename + ".sikuli" + "\\" + sikulifilename + ".py";
                          if (File.Exists(sikulifilepath))
                          {
                              using (FileStream fs = new FileStream(pathString, FileMode.Open, FileAccess.Write))
                              {
                                  Byte[] info = new UTF8Encoding(true).GetBytes(text);
                                  fs.Write(info, 0, info.Length);
                              }
                          }         

                        }
                    }
                }
            }
        }
        void exp_AutoStartControlExp()
        {
            System.Threading.Thread.Sleep(500);
            //toolStripbtnGetCtl_Click(null, null);
        }
        [EventSubscription(EventTopicNames.Run, ThreadOption.UserInterface)]
        public void OnRun(object sender, EventArgs e)
        {
            OnRecord(e);
            recoder = new Form1();
            recoder.Preview += new Form1.PreviewEventHandler(recoder_Preview);
            recoder.RecordingStopped += new Form1.RecordingStoppedEventHandler(recoder_RecordingStopped);
            recoder.ShowDialog();

            if (!String.IsNullOrEmpty(filePath))
            {
                bw = new BackgroundWorker();
                bw.RunWorkerAsync();
                bw.DoWork += new DoWorkEventHandler(bw_DoWork);
                bw.RunWorkerCompleted += new RunWorkerCompletedEventHandler(bw_RunWorkerCompleted);
                try
                {
                    Lib.Sikuli.Script(filePath);
                }
                catch(Exception ex)
                {
                    scripting = false;
                    if (progress != null)
                        progress.Close();
                    throw ex;
                }
               
                if (progress != null)
                    progress.Close();
             //   Win32.MinimizeAll();
                LaunchSikuli();
            }


           

            //timer = new System.Timers.Timer(10000);
            //timer.Elapsed += new System.Timers.ElapsedEventHandler(timer_Elapsed);
            //UseCase usecase = e.UseCaseCaptured;
            //apps = new Dictionary<string, TabPage>();
            //OnStatusUpdate(new EventArgs<string>("Loading applications..."));

            //e.ApplicationList.ForEach(a => {
            //    int processid = 0;
            //    int space = a.IndexOf(' ');
            //    string param = String.Empty; 
            //    string process = a;
            //    if (space != -1)
            //    {
            //        param = a.Substring(space, a.Length - space);
            //        process = a.Substring(0, space);
            //    }

            //    if (a.Contains("http"))
            //  //  if(true)
            //    {
            //        System.Windows.Forms.WebBrowser browser = new WebBrowser();
            //        browser.Dock = DockStyle.Fill;
            //        browser.Url = new Uri(a);
            //        browser.ScriptErrorsSuppressed = true;
            //        browser.DocumentCompleted += new WebBrowserDocumentCompletedEventHandler(browser_DocumentCompleted);
            //        TabPage tab1 = new TabPage(a);
            //        tab1.AutoScroll = true;
            //        tab1.Controls.Add(browser);
            //        this.tabControl1.Controls.Add(tab1);
            //        Win32.SetParent(browser.Handle, tab1.Handle);
            //        tab1.Tag = new Processplayback { path = a, handle = browser.Handle, processid = 0, tag = browser };
            //        apps.Add(a, tab1);
            //    }
            //    else
            //    {
            //        TabPage tab = new TabPage(process);
            //        tab.AutoScroll = true;
            //        this.tabControl1.Controls.Add(tab);
            //        var handle = Win32.Dockit(tab.Handle, process, param, out processid);
            //        Win32.ShowWindow(handle, ShowWindowCommands.Normal);
            //        tab.Tag = new Processplayback { path = a, handle = handle, processid = processid };
            //        apps.Add(a, tab);
            //    }
            //});

            //OnStatusUpdate(new EventArgs<string>("Ready"));
            //action = new Infosys.ATR.UIAutomation.SEE.PlayActions(usecase);
            //action.ReadyToExecute += new Infosys.ATR.UIAutomation.SEE.PlayActions.ReadyToExecuteEventHandler(action_ReadyToExecute);
            //action.InitiatePlayBack();           
        }

        void recoder_Preview(Form1.RecordingStoppedArgs e)
        {
            Lib.Sikuli.ScriptAndExecute(e.ScriptPath);
        }

        void ShowProgress()
        {
            progress = new ShowProgress();
            progress.ShowDialog();
        }

        void recoder_RecordingStopped(Form1.RecordingStoppedArgs e)
        {
            recoder.Close();          
                        
            
            filePath = e.ScriptPath;
            try
            {
                System.Windows.Forms.Application.DoEvents();
            }
            catch
            {

            }
            OnStopRecording(e);
            Form2 eventViewer = recoder.EventViewer;
            if (eventViewer != null)
                eventViewer.Close();
        }

        [EventSubscription(EventTopicNames.Edit, ThreadOption.UserInterface)]
        public void OnEdit(object sender, EditEventArgs eventArgs)
        {
            filePath = eventArgs.filePath;
          string  fileName = eventArgs.filePath;
          fileName = fileName.Replace(".atrwb", "");
          string  UsecaseName = eventArgs.fileName;
          string IDEFiles = ConfigurationManager.AppSettings["IDEProjects"];
          string IDEfilepath = IDEFiles + UsecaseName + ".py";
          string SikuliFiles = ConfigurationManager.AppSettings["ProjectHome"];
         // filePath = SikuliFiles + fileName + ".sikuli" + "\\" + fileName + ".sikuli";
          //if (File.Exists(filePath))
          //{
          //    LaunchStudioIDE(filePath, UsecaseName);
          //}
          //else 
           
           if (File.Exists(IDEfilepath))
          {
              LaunchStudioIDE(IDEfilepath, UsecaseName);
          }
          else
          {
              LaunchStudioIDE(string.Empty, UsecaseName);
          }
          


            //UseCaseEditor useCase = new UseCaseEditor(eventArgs.filePath);
            //useCase.Dock = DockStyle.Fill;
            //TabPage t = new TabPage(useCase.Name);
            //t.Controls.Add(useCase);            
            //this.tabControl1.Controls.Add(t);
            //this.WorkItem.SmartParts.Add(useCase);            
            //WindowSmartPartInfo info = new WindowSmartPartInfo();
            //info.Title = "Edit";
            //this.WorkItem.RootWorkItem.Workspaces[WorkspaceNames.TabWorkSpace].Show(useCase, info);

        }

        void browser_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {
            //WebBrowser b = sender as WebBrowser;

            // action.ExecuteActionsOn(b.Url.AbsoluteUri, b);

            lastDocumentCompletedAt = DateTime.Now;
            b = sender as WebBrowser;

            if (e.Url.AbsolutePath != b.Url.AbsolutePath)
                return;
            ICT.ContextManagerHelper oCtxtMgrHelper = new ICT.ContextManagerHelper();
            oCtxtMgrHelper.RaiseScreenChanged(BuildContext(b.DocumentTitle));
            if (playbackReady)
            {
                playbackReady = false;
                timer.Enabled = false;
                action.ExecuteActionsOn(b.Url.AbsoluteUri, b);
                System.Threading.Thread.Sleep(5000);

            }
        }

        private PresentationEntities.Context BuildContext(string name)
        {

            int iDocIndex = name.IndexOf('.');
            if (iDocIndex > 0)
                name = name.Remove(iDocIndex);
            PresentationEntities.Context context = new PresentationEntities.Context();
            context.BusinessContext = new System.Collections.Generic.Dictionary<string, string>();
            context.BusinessContext.Add(ICT.Constants.DictionaryKeyForTextSearch, name);
            return context;
        }

        void action_ReadyToExecute(Infosys.ATR.UIAutomation.SEE.PlayActions.ReadyToExecuteEventArgs e)
        {
            if (this.tabControl1.InvokeRequired)
            {
                this.tabControl1.BeginInvoke(new Action<Infosys.ATR.UIAutomation.SEE.PlayActions.ReadyToExecuteEventArgs>(action_ReadyToExecute), new object[] { e });
                return;
            }

            TabPage tab = apps[e.Application];
            this.tabControl1.SelectedTab = tab;
            Processplayback play = tab.Tag as Processplayback;
            //OnStatusUpdate(new EventArgs<string>(String.Format("Automating {0}", play.path)));
            var ae = AutomationElement.FromHandle(play.handle);
            //ICT.ContextManagerHelper oCtxtMgrHelper = new ICT.ContextManagerHelper();
            //oCtxtMgrHelper.RaiseScreenChanged(BuildContext(ae.Current.Name));
            //if (!play.path.Contains("http"))
            //if (false)
            //{
                action.ExecuteActionsOn(play.path, play.handle, play.processid);
           // }
            //else
            //{
            //    timer.Enabled = true;
            //}
            playbackReady = true;
           // OnStatusUpdate(new EventArgs<string>("Ready"));
        }

        protected virtual void OnStatusUpdate(EventArgs<String> eventArgs)
        {
            if (StatusUpdate != null)
            {
                StatusUpdate(this, eventArgs);
            }
        }

        void timer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            if (playbackReady && ((DateTime.Now - lastDocumentCompletedAt).TotalSeconds > 30.0)
                && b != null) //if play back is ready and time elapsed is more than 15 seconds
            {
                playbackReady = false;
                timer.Enabled = false;
                action.ExecuteActionsOn(b.Url.AbsoluteUri, b);
                System.Threading.Thread.Sleep(5000);
            }
        }

        protected virtual void OnRecord(EventArgs eventArgs)
        {
            if (Record != null)
            {
                Record(this, eventArgs);
            }
        }

        protected virtual void OnStopRecording(EventArgs eventArgs)
        {
            if (StopRecording != null)
            {
                StopRecording(this, eventArgs);
            }
        }
        bool visible = true;
        private void button1_Click(object sender, EventArgs e)
        {
            panel1.Dock = DockStyle.Fill;
          //  panel1.Size = new System.Drawing.Size(1300, 900);
            //if (visible)
            //{
                Util.Animate(splitContainer1.Panel1, Util.Effect.Slide, 150, 360);
                visible = false;
                tabControl1.DrawMode = TabDrawMode.OwnerDrawFixed;
                tabControl1.SizeMode = TabSizeMode.Fixed;
                tabControl1.Size = new Size(400, 400);
                splitContainer1.Panel1Collapsed = false;
                ShowDetails.Visible = false;
                HideDetails.Visible = true;
            //}
            //else
            //{

               // visible = true;
               //Util.Animate(splitContainer1.Panel1, Util.Effect.Slide, 150, 360);
               // splitContainer1.Panel1Collapsed = false;

           // }

        }
        //private void button2_Click(object sender, EventArgs e)
        //{
        //    if (splitContainer1.Panel1Collapsed)
        //    {
        //        // collapsing the panel in the end to apply layout changes
                
        //        splitContainer1.Panel1Collapsed = false;
        //    }

        //}

       
        private void button3_Click(object sender, EventArgs e)
        {
            panel1.Dock = DockStyle.None;
            Util.Animate(splitContainer1.Panel1, Util.Effect.Slide, 150, 360);
            visible = false;
            tabControl1.DrawMode = TabDrawMode.OwnerDrawFixed;
            tabControl1.SizeMode = TabSizeMode.Fixed;
            tabControl1.Size = new Size(400, 400);
            splitContainer1.Panel1Collapsed = true;
            HideDetails.Visible = false;
            ShowDetails.Visible = true;

        }

       

        private void tabControl1_Click(object sender, EventArgs e)
        {
            //MessageBox.Show("Clicked");
        }
        private void splitContainer1_SplitterMoved(System.Object sender, System.Windows.Forms.SplitterEventArgs e)
        {
            //HideDetails.Anchor = AnchorStyles.None;
            //HideDetails.Left = (this.splitContainer1.Panel1.Width - HideDetails.Width);
            //// Define what happens when the splitter is no longer moving.
            //Cursor.Current = System.Windows.Forms.Cursors.Default;
        }

        private void HideDetails_Click(object sender, EventArgs e)
        {
           // panel1.Dock = DockStyle.None;
            panel1.Dock = DockStyle.Fill;
            Util.Animate(splitContainer1.Panel1, Util.Effect.Slide, 150, 360);
            visible = false;
            tabControl1.DrawMode = TabDrawMode.OwnerDrawFixed;
            tabControl1.SizeMode = TabSizeMode.Fixed;
            tabControl1.Size = new Size(400, 400);
            splitContainer1.Panel1Collapsed = true;
            HideDetails.Visible = false;
            ShowDetails.Visible = true;
        }
        public void DeleteFiles(string filename)
        {
            string UsecaseLocation = ConfigurationManager.AppSettings["UsecaseLocation"];

            if (Infosys.WEM.Infrastructure.Common.ValidationUtility.InvalidCharValidatorForFile(Path.GetFileNameWithoutExtension(filename)))
            {
                MessageBox.Show("Please provide the file name without Special Characters", "Special Characters...", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (File.Exists(UsecaseLocation + "\\" + filename + ".txt"))
                    File.Delete(UsecaseLocation + "\\" + filename + ".txt");
        }

        private void Win32Automate(string path)
        {
            //timer = new System.Timers.Timer(10000);
            //timer.Elapsed += new System.Timers.ElapsedEventHandler(timer_Elapsed);

            path = System.IO.Path.GetFileName(path);
            path = System.IO.Path.Combine(@"C:\usecase", path);

            PlayActions playActObj = new PlayActions();
            List<string> appObjs = playActObj.GetApplications(path);
            
            System.Xml.XmlDocument xmlDoc = new System.Xml.XmlDocument();
            xmlDoc.Load(path);
            UseCase UseCaseCaptured = Infosys.ATR.UIAutomation.SEE.SerializeAndDeserialize.Deserialize(xmlDoc.OuterXml, typeof(UseCase)) as UseCase;;
            
            apps = new Dictionary<string, TabPage>();



            appObjs.ForEach(a =>
            {
                int processid = 0;
                //int space = a.IndexOf(' ');
                //string param = String.Empty;
                //string process = a;
                //if (space != -1)
                //{
                //    param = a.Substring(space, a.Length - space);
                //    process = a.Substring(0, space);
                //}
                string param = "";
                //if (a.Contains("iexplore"))
                //{
                //    param = @"http://info.servicenow.com";
                //}


                TabPage tab = new TabPage(a);
                tab.AutoScroll = true;
                this.tabControl1.Controls.Add(tab);
                var handle = Lib.Win32.Dockit(tab.Handle, a, param, out processid);
                Lib.Win32.ShowWindow(handle, Lib.ShowWindowCommands.Normal);
                tab.Tag = new Processplayback { path = a, handle = handle, processid = processid };
                apps.Add(a, tab);

            });

            action = new Infosys.ATR.UIAutomation.SEE.PlayActions(UseCaseCaptured);
            action.ReadyToExecute += new Infosys.ATR.UIAutomation.SEE.PlayActions.ReadyToExecuteEventHandler(action_ReadyToExecute);
            action.InitiatePlayBack();      
        
        }

        [EventSubscription(EventTopicNames.ExecuteScript, ThreadOption.UserInterface)]
        public void OnExecuteScript(object sender,EventArgs eventArgs)
        {

           // Win32Automate();
          

             //int tabindex = tabControl1.SelectedIndex;
             //if (tabindex != -1)
             //{
             //    if (tabControl1.TabPages[tabindex].Controls.Count != 0)
             //    {
             //        string selectedExecutemethod;
             //        //IdeUC IDEuserctrl = tabControl1.TabPages[tabindex].Controls[0] as IdeUC;
             //        List<Execute> Options = new List<Execute>();
             //        List<string> OptionsForDialog = new List<string>();
                    
             //        string fileName = tabControl1.TabPages[tabindex].ToolTipText;
             //        //to get filepath for sikuli and IDE files
             //        Options = FindExecuteOptions(fileName);
             //        foreach (Execute execute in Options)
             //        { 
             //            OptionsForDialog.Add(execute.ExecuteOption);
             //        }
             //        if (OptionsForDialog.Count > 1)
             //        {
             //            ExecuteDialog ExecuteOptions = new ExecuteDialog(OptionsForDialog);
             //            ExecuteOptions.ShowDialog();
             //            selectedExecutemethod = ExecuteOptions.TheValue;
             //        }
             //        else
             //        {
             //            selectedExecutemethod = OptionsForDialog[0].ToString();
             //        }
             //        PythonIDE IDEuserctrl = tabControl1.TabPages[tabindex].Controls[0] as PythonIDE;
             //        if (IDEuserctrl != null)
             //        {
             //            IDEuserctrl.ExecutePythonScript();
             //        }
             //    }
             //}
        }
        [EventSubscription(EventTopicNames.Execute, ThreadOption.UserInterface)]
        public void OnExecute(object sender, EditEventArgs eventArgs)
        {
            Win32Automate(eventArgs.fileName);

            //switch(eventArgs.ExecuteOption){
            //    case ConstantNames.EXECUTE_PYTHON:
            //         PythonIDE IDEuserctrl = new PythonIDE();
            //        if (IDEuserctrl != null)
            //        {
            //            string UsecaseName = eventArgs.UsecaseName;
            //            string IDEFiles = ConfigurationManager.AppSettings["IDEProjects"];
            //            string IDEfilepath = IDEFiles + UsecaseName + ".py";
            //            IDEuserctrl.FilePath = IDEfilepath;
            //            //IDEuserctrl.ExecutePythonScript();
            //            IDEuserctrl.ExecutePythonScriptThruBat();
            //        }
            //        break;
            //    case ConstantNames.EXECUTE_SIKULI:
            //          PythonIDE Sikuliuserctrl = new PythonIDE();
            //          if (Sikuliuserctrl != null)
            //        {
            //            string fileName = eventArgs.fileName;
            //            fileName = fileName.Replace(".atrwb", "");
            //            string SikuliFiles = ConfigurationManager.AppSettings["ProjectHome"];
            //            string sikulifilepath = SikuliFiles + fileName + ".sikuli" + "\\" + fileName + ".py";
            //            Sikuliuserctrl.FilePath = sikulifilepath;
            //            //IDEuserctrl.ExecutePythonScript();
            //            Sikuliuserctrl.ExecuteSikuliScriptThruBat();
            //        }
            //       // Win32.MinimizeAll();
            //        //Sikuli.Run(eventArgs.filePath);
            //        break;
            //    case ConstantNames.EXECUTE_ATR:
            //        break;
            //}

                   //IdeUC IDEuserctrl = tabControl1.TabPages[tabindex].Controls[0] as IdeUC;
                   
               
          
        }
        private List<Execute> FindExecuteOptions(string UsecaseName)
        {
            List<UsecaseFile> usecases = new List<UsecaseFile>();
            List<Execute> ListofFiles = new List<Execute>();
            string sikulifilename = string.Empty;
            string IDEFiles = ConfigurationManager.AppSettings["IDEProjects"];
            string IDEfilepath = IDEFiles + UsecaseName + ".py";
            string SikuliFiles = ConfigurationManager.AppSettings["ProjectHome"];
           
            string folderPath = @System.Configuration.ConfigurationManager.AppSettings["FileSystemWatcher"];

            string[] filePaths = Directory.GetFiles(folderPath);

            for (int i = 0; i < filePaths.Length; i++)
            {
                usecases.Add(ExtractUsecaseName(filePaths[i]));
                
            }
            foreach (UsecaseFile usecase in usecases)
            {
                if (usecase.usecaseName == UsecaseName)
                {
                    sikulifilename = usecase.filename;
                   sikulifilename= sikulifilename.Replace(".atrwb","");
                    break;
                }
            }
            string sikulifilepath = SikuliFiles + sikulifilename + ".sikuli" + "\\" + sikulifilename + ".py";
            string ATRFilepath = folderPath + "\\" + sikulifilename + ".atrwb";
            //check for sikuli files
            if (File.Exists(sikulifilepath))
            {Execute items=new Execute();
            items.ExecuteOption = ConstantNames.EXECUTE_SIKULI;
                items.filepathToExecute=sikulifilepath;
                ListofFiles.Add(items);
               // ListofFiles.Add("Execute Sikuli Script,"+sikulifilepath);
            }
            //check for IDE Files
            if (File.Exists(IDEfilepath))
            {
                Execute items = new Execute();
                items.ExecuteOption = ConstantNames.EXECUTE_PYTHON;
                items.filepathToExecute = IDEfilepath;
                ListofFiles.Add(items);
                //ListofFiles.Add("Execute Python Script," + IDEfilepath);
            }
            if (File.Exists(ATRFilepath))
            {
                bool IsATRFile = CheckifATRXML(ATRFilepath);
                if (IsATRFile)
                {
                    Execute items = new Execute();
                    items.ExecuteOption = ConstantNames.EXECUTE_ATR;
                    items.filepathToExecute = ATRFilepath;
                    ListofFiles.Add(items);
                }
                //ListofFiles.Add("Execute Python Script," + IDEfilepath);
            }
            return ListofFiles;
        }
       
        private static UsecaseFile ExtractUsecaseName(string filePaths)
        {
            UsecaseFile temp = new UsecaseFile();
            StringBuilder sb = new StringBuilder();
            ReadFileIntoString(filePaths, sb);
            string allines = sb.ToString();
            UseCase uc = Infosys.ATR.UIAutomation.SEE.SerializeAndDeserialize.Deserialize(allines, typeof(UseCase)) as UseCase;
            temp.usecaseName = uc.Name;
            temp.filepath = filePaths;
            temp.filename = Path.GetFileName(filePaths);

            return temp;
        }
        private static bool CheckifATRXML(string filePaths)
        {
            bool IsATRXML = false;
            IMSWorkBench.Scripts.Entities.UsecaseFile temp = new IMSWorkBench.Scripts.Entities.UsecaseFile();
            StringBuilder sb = new StringBuilder();
            ReadFileIntoString(filePaths, sb);
            string allines = sb.ToString();
            UseCase uc = Infosys.ATR.UIAutomation.SEE.SerializeAndDeserialize.Deserialize(allines, typeof(UseCase)) as UseCase;
            if (uc.Activities.Count != 0)
            {
                IsATRXML = true;
            }
            return IsATRXML;
        }
        private static bool ReadFileIntoString(string filePaths, StringBuilder sb)
        {
            while (true)
            {
                try
                {
                    using (StreamReader sr = new StreamReader(filePaths))
                    {
                        String line;
                        while ((line = sr.ReadLine()) != null)
                        {
                            sb.AppendLine(line);
                        }
                        break;
                    }
                }
                catch
                {
                    System.Threading.Thread.Sleep(500);

                }
            }
            return true;
        }
    }
    public class Execute
    {
        public string ExecuteOption { get; set; }
        public string filepathToExecute { get; set; }
       
    }

    public class Processplayback
    {
        public IntPtr handle { get; set; }
        public int processid { get; set; }
        public string path { get; set; }
        public object tag { get; set; }
    }
}

