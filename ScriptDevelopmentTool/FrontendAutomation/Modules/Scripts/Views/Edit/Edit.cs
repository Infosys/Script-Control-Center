//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// 
//
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using IMSWorkBench.Infrastructure.Interface;
using Infosys.ATR.UIAutomation.SEE;
using Infosys.ATR.UIAutomation.Entities;
using System.Diagnostics;
using System.Xml.Linq;
using IMSWorkBench.Infrastructure.Library;
using IMSWorkBench.Infrastructure.Library.UI;



namespace IMSWorkBench.Scripts
{
    public partial class Edit : UserControl, IEdit
    {
        private string _path;
        private UseCase _editUseCase;
        private XDocument xDoc;
        private ContextMenu ctxtMenu;
//        private PlayActions action;
        private Process p;
        private RecordActions recordactions;
        private System.Text.StringBuilder sb = null;

        #region --Properties--

        public string Path
        {
            get
            {
                return _path;
            }
            set
            {
                _path = value;
            }
        }


        public UseCase EditUseCase
        {
            get
            {
                return _editUseCase;
            }
            set
            {
                _editUseCase = value;
            }
        }
#endregion

        public Edit()
        {
            InitializeComponent();

            ctxtMenu = new ContextMenu();
            MenuItem add = new MenuItem("Add Task");
            ctxtMenu.MenuItems.Add(add);
            add.Click += new EventHandler(add_Click);
            MenuItem delete = new MenuItem("Delete");
            delete.Click += new EventHandler(delete_Click);
            ctxtMenu.MenuItems.Add(delete);
            recordactions = new RecordActions();
            sb = new System.Text.StringBuilder();
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            base.OnLoad(e);
            BuildTree();
        }

        private void BuildTree()
        {
            xDoc = XDocument.Load(Path);

            var root = xDoc.Root;
            _editUseCase = SerializeAndDeserialize.Deserialize(root.ToString(), typeof(UseCase)) as UseCase;
            var x = GetNodes(new TreeNode(root.Name.LocalName), root).ToArray();
            treeView1.Nodes.AddRange(x);
        }

        private IEnumerable<TreeNode> GetNodes(TreeNode node, XElement element)
        {
            return element.HasElements ?
                node.AddRange(from item in element.Elements()
                              let tree = GetNode(item)
                              from newNode in GetNodes(tree, item)
                              select newNode)
                              :
                new[] { node };
        }

        private TreeNode GetNode(XElement element)
        {
            if (element.Name.LocalName == "Task")
            {
                TreeNode node = new TreeNode("Task-" + element.Attribute("Name").Value);
                Node n = new Node();
                n.GroupScriptId = element.Attribute("GroupScriptId").Value;
                n.TaskId = element.FirstAttribute.Value;
                n.ActivityId = element.Parent.FirstAttribute.Value;
                n.Name = element.Attribute("Name").Value;
                n.IsTask = true;
                node.Tag = n;
                return node;
            }
            else if (element.Name.LocalName == "TargetApplication")
                return new TreeNode("Application-" + element.Attribute("ApplicationExe").Value);
            else if (element.Name.LocalName == "TargetControlAttributes" ||
                element.Name.LocalName == "TargetApplicationAttributes")
            {
                TreeNode node = new TreeNode(element.FirstAttribute.Value);
                Node n = new Node();
                n.TaskId = element.Parent.FirstAttribute.Value;
                n.ActivityId = element.Parent.Parent.FirstAttribute.Value;
                n.Value = element.Attribute("Value").Value;
                n.Name = element.FirstAttribute.Value;
                n.IsTask = false;
                n.IsTargetControl = element.Name.LocalName == "TargetControlAttributes" ? true : false;
                n.IsTargetApplication = !n.IsTargetControl;
                node.Tag = n;
                return node;
            }
            else if (element.Name.LocalName == "Activity")
            {
                Node n = new Node();
                n.ActivityId = element.FirstAttribute.Value;
                TreeNode node = new TreeNode(element.Name.LocalName);
                node.Tag = n;
                return node;
            }
            return new TreeNode(element.Name.LocalName);
        }

        private void treeView1_NodeMouseDoubleClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            if (panel3.Visible == false)
                panel3.Visible = true;
            if (e.Node.Tag != null)
                textBox1.Text = textBox2.Text = e.Node.Tag.ToString();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            Node selected = this.treeView1.SelectedNode.Tag as Node;
            if (selected.IsTargetControl)
            {
                var edit = xDoc.Elements("UseCase").Elements("Activity").FirstOrDefault(a => a.FirstAttribute.Value == selected.ActivityId).
                    Elements("Task").FirstOrDefault(t => t.FirstAttribute.Value == selected.TaskId).
                    Elements("TargetControlAttributes").FirstOrDefault(tc => tc.FirstAttribute.Value == selected.Name);
                edit.Attribute("Value").Value = textBox2.Text;
            }
        }

        private void treeView1_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            Node n = (Node)e.Node.Tag;

            if (n != null)
            {
                if ((e.Button == System.Windows.Forms.MouseButtons.Right) &&
                    (e.Node.Text == "Activity"))
                {
                    ctxtMenu.MenuItems[0].Enabled = true;
                    e.Node.ContextMenu = ctxtMenu;
                }
                else if ((e.Button == System.Windows.Forms.MouseButtons.Right) &&
                    (n.IsTask == true))
                {
                    ctxtMenu.MenuItems[0].Enabled = false;
                    e.Node.ContextMenu = ctxtMenu;
                }
            }
        }

        void add_Click(object sender, EventArgs e)
        {
            this._presenter.OnModify(new EventArgs<XDocument>
                (xDoc));

            //action = new Infosys.ATR.UIAutomation.SEE.PlayActions(_editUseCase);
            //p = Process.Start(_editUseCase.Activities[0].TargetApplication.ApplicationExe);
            //action.ReadyToExecute += new PlayActions.ReadyToExecuteEventHandler(action_ReadyToExecute);
            //action.InitiatePlayBack();           
        }

        //void action_ReadyToExecute(PlayActions.ReadyToExecuteEventArgs e)
        //{           
        //    action.ExecuteActionsOn(e.Application,p.Handle,p.Id);
        //    this.button4.Visible = true;
           
        //}

        [STAThread]
        private void RecordEvents()
        {
            recordactions.AnyUserEvent += new RecordActions.AnyUserEventHandler(recordactions_AnyUserEvent);
            recordactions.Start(true);
        }

         void recordactions_AnyUserEvent(RecordActions.AnyUserEventArgs e)
        {
            sb.Append(e.EventDesc);
        }

        void delete_Click(object sender, EventArgs e)
        {
            TreeNode node = this.treeView1.SelectedNode;
            Node n = node.Tag as Node;
            if (n.IsTask)
            {
                var xElements = xDoc.Elements("UseCase").Elements("Activity").Elements("Task").Where(t => t.Attribute("GroupScriptId").Value == n.GroupScriptId);
                xElements.Remove();

                List<TreeNode> nodes = new List<TreeNode>();

                foreach (TreeNode child in node.Parent.Nodes)
                {
                    Node childNode = child.Tag as Node;
                    if (childNode != null && childNode.IsTask && childNode.GroupScriptId == n.GroupScriptId)
                    {
                        nodes.Add(child);
                    }
                }

                nodes.ForEach(n1 =>
                {
                    this.treeView1.Nodes.Remove(n1);
                });
            }
            else
            {

                var xElements = xDoc.Elements("UseCase").Elements("Activity").FirstOrDefault(a => a.FirstAttribute.Value == n.ActivityId);
                xElements.Remove();
                treeView1.SelectedNode.Remove();
            }
        }

        private void button3_Click(object sender, EventArgs e)
        {
            xDoc.Save(_path);
        }

        private void button2_Click(object sender, EventArgs e)
        {
            Node selected = this.treeView1.SelectedNode.Tag as Node;
            if (selected.IsTargetControl)
            {
                var edit = xDoc.Elements("UseCase").Elements("Activity").FirstOrDefault(a => a.FirstAttribute.Value == selected.ActivityId).
                    Elements("Task").FirstOrDefault(t => t.FirstAttribute.Value == selected.TaskId).
                    Elements("TargetControlAttributes").FirstOrDefault(tc => tc.FirstAttribute.Value == selected.Name);
                edit.Attribute("Value").Value = textBox2.Text = textBox1.Text;
            }
        }

        private void button4_Click(object sender, EventArgs e)
        {
            if (this.button4.Text == "Record")
                RecordEvents();
            else
                StopRecording();
            this.button4.Text = "Stop";

        }

        private void StopRecording()
        {
            this.button4.Text = "Record";
            Infosys.ATR.UIAutomation.Entities.UseCase uc = recordactions.UseCase;
            string events = recordactions.Start(false);
            string usecasexml = Infosys.ATR.UIAutomation.SEE.SerializeAndDeserialize.Serialize(uc);
            System.IO.File.WriteAllText(@"d:\usecase1.atrwb", usecasexml);
        }
    }

    public static class TreeNodeEx
    {
        public static IEnumerable<TreeNode> AddRange(this TreeNode collection, IEnumerable<TreeNode> nodes)
        {
            var items = nodes.ToArray();
            collection.Nodes.AddRange(items);
            return new[] { collection };
        }
    }

    public static class IEnumerableEx
    {
        public static int FindIndex<T>(this IEnumerable<T> items, Func<T, bool> predicate)
        {
            if (items == null) throw new ArgumentNullException("items");
            if (predicate == null) throw new ArgumentNullException("predicate");

            int retVal = 0;
            foreach (var item in items)
            {
                if (predicate(item)) return retVal;
                retVal++;
            }
            return -1;
        }

        public static int IndexOf<T>(this IEnumerable<T> items, T item)
        {
            return items.FindIndex(i => EqualityComparer<T>.Default.Equals(item, i));
        }
    }

    public class Node
    {
        public string GroupScriptId { get; set; }
        public string ActivityId { get; set; }
        public string TaskId { get; set; }
        public string Value { get; set; }
        public string Name { get; set; }
        public bool IsTask { get; set; }
        public bool IsTargetControl { get; set; }
        public bool IsTargetApplication { get; set; }

        public override string ToString()
        {
            return String.IsNullOrEmpty(Value) ? Name : Value;
        }

    }


}

