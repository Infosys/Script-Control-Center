## ===============================================================================
## Except for any open source software components embedded in this Infosys proprietary software program
## (Infosys Automation Platform), this Program is protected by copyright laws,
## international treaties and other pending or existing intellectual property rights in India, the United States
## and other countries.
## Except as expressly permitted, any unauthorized reproduction, storage, transmission in any form or by any means
## (including without limitation electronic, mechanical, printing, photocopying, recording or otherwise), or any
## distribution of this Program, or any portion of it, may result in severe civil and criminal penalties, and will
## be prosecuted to the maximum extent possible under the law.
## ===============================================================================
## Generated by Infosys Automation Platform.
## Please follow agreement before making changes to this file.
## ===============================================================================

##############################################################################
##This class was code generated by Infosys Automation Platform.

## Description: This is base class for IAP_Controller_Calc
##              It contains class which contains all business logic operations

##Copyright (c) 2014 - 2015 Infosys Technologies Ltd. All Rights Reserved.
##############################################################################

import sys
import clr
import iap_utilities
from iap_utilities import *
import iap_constants

@foreach (var baseAssembly in @Model.BaseAssemblies)
{
@:@String.Format("sys.path.append(r \"{0}\")", @baseAssembly.Path)
}

@foreach (var addReference in @Model.AddReferences)
{ 
@:@String.Format("clr.AddReference(\"{0}\")", @addReference.Assembly)
foreach (var import in @addReference.Imports)
{if(@import.ImportNamespace!=null)
{
@:@String.Format("import {0}", @import.ImportNamespace)
}
@:@String.Format("from {0} import *", @import.FromNamespace)
@String.Format("\n")
}
}

##############################################################################
### Company    : Infosys Limited
### Description: This file contains fucntions which are auto generated
### Version    : 1
##############################################################################
class @String.Format("{0}(object):",@Model.ClsName) 
@if(@Model.DeclareVariables !=null){ 
foreach (var variable in @Model.DeclareVariables)
{
	@:@String.Format("{0}={1}", variable.Name,variable.value)
}}

     ##############################################################################
     ### Constructor         
     ### Instantiate the class  @Model.ClsName
     ### Initializes logger
     ### Initializes automationFacade
     ### Returns None
     ##############################################################################
	  def __init__(self, inputMap):
        @if(@Model.ClsConstructor!=null){
        if(@Model.ClsConstructor.Initialized !=null){
		foreach (var variable in @Model.ClsConstructor.Initialized)
		{
		 @:@String.Format("self.{0}={1}", variable.Name,variable.value)
		}}}
		self.logger.logAudit("Automation Facade initialized")

@if (@Model.Methods != null)
{
foreach (var method in @Model.Methods)
{	 @String.Format("\n\n")
	 @:##############################################################################
	 @:### Method         :  @method.Description
	 @:##############################################################################
	 @:@String.Format("def {0}(self):", @method.Name)
		 <text>self.logger.logAudit("@method.Name started")
	@if (@method.Variables != null)
 {
	foreach (var variable in @method.Variables)
 {		  
		 @:@variable.Name=@variable.value
	}
 }
         #TO DO
         #TO DO logData = CreateAuditData("result", result)
         self.logger.logAudit("@method.Name completed", logData)</text>
}
}