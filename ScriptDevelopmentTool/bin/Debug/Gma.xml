<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infosys.ATR.UIAutomation.UserActivityMonitor</name>
    </assembly>
    <members>
        <member name="T:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler">
            <summary>
            This class monitors all global events
            </summary>
        </member>
        <member name="T:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.GlobalEventProc">
            <summary>
            This procedure is an application-defined or library-defined callback 
            function used with the SetWindowsHookEx function. The HOOKPROC type defines a pointer 
            to this callback function. CallWndProc is a placeholder for the application-defined 
            or library-defined function name.
            </summary>
            <param name="nCode">
            [in] Specifies whether the hook procedure must process the message. 
            If nCode is HC_ACTION, the hook procedure must process the message. 
            If nCode is less than zero, the hook procedure must pass the message to the 
            CallNextHookEx function without further processing and must return the 
            value returned by CallNextHookEx.
            </param>
            <param name="wParam">
            [in] Specifies whether the message was sent by the current thread. 
            If the message was sent by the current thread, it is nonzero; otherwise, it is zero. 
            </param>
            <param name="lParam">
            [in] Pointer to a CWPSTRUCT structure that contains details about the message. 
            </param>
            <returns>
            If nCode is less than zero, the hook procedure must return the value returned by CallNextHookEx. 
            If nCode is greater than or equal to zero, it is highly recommended that you call CallNextHookEx 
            and return the value it returns; otherwise, other applications that have installed WH_CALLWNDPROC 
            hooks will not receive hook notifications and may behave incorrectly as a result. If the hook 
            procedure does not call CallNextHookEx, the return value should be zero. 
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/callwndproc.asp
            </remarks>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.mouseGlobalEventHandle">
            <summary>
            Stores the handle to the mouse hook procedure.
            </summary>
        </member>
        <member name="M:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.MouseGlobalEventProc(System.Int32,System.Int32,System.IntPtr)">
            <summary>
            A callback function which will be called every Time a mouse activity detected.
            </summary>
            <param name="nCode">
            [in] Specifies whether the hook procedure must process the message. 
            If nCode is HC_ACTION, the hook procedure must process the message. 
            If nCode is less than zero, the hook procedure must pass the message to the 
            CallNextHookEx function without further processing and must return the 
            value returned by CallNextHookEx.
            </param>
            <param name="wParam">
            [in] Specifies whether the message was sent by the current thread. 
            If the message was sent by the current thread, it is nonzero; otherwise, it is zero. 
            </param>
            <param name="lParam">
            [in] Pointer to a CWPSTRUCT structure that contains details about the message. 
            </param>
            <returns>
            If nCode is less than zero, the hook procedure must return the value returned by CallNextHookEx. 
            If nCode is greater than or equal to zero, it is highly recommended that you call CallNextHookEx 
            and return the value it returns; otherwise, other applications that have installed WH_CALLWNDPROC 
            hooks will not receive hook notifications and may behave incorrectly as a result. If the hook 
            procedure does not call CallNextHookEx, the return value should be zero. 
            </returns>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.keyboardGlobalEventHandle">
            <summary>
            Stores the handle to the Keyboard hook procedure.
            </summary>
        </member>
        <member name="M:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.KeyboardGlobalEventProc(System.Int32,System.Int32,System.IntPtr)">
            <summary>
            A callback function which will be called every Time a keyboard activity detected.
            </summary>
            <param name="nCode">
            [in] Specifies whether the hook procedure must process the message. 
            If nCode is HC_ACTION, the hook procedure must process the message. 
            If nCode is less than zero, the hook procedure must pass the message to the 
            CallNextHookEx function without further processing and must return the 
            value returned by CallNextHookEx.
            </param>
            <param name="wParam">
            [in] Specifies whether the message was sent by the current thread. 
            If the message was sent by the current thread, it is nonzero; otherwise, it is zero. 
            </param>
            <param name="lParam">
            [in] Pointer to a CWPSTRUCT structure that contains details about the message. 
            </param>
            <returns>
            If nCode is less than zero, the hook procedure must return the value returned by CallNextHookEx. 
            If nCode is greater than or equal to zero, it is highly recommended that you call CallNextHookEx 
            and return the value it returns; otherwise, other applications that have installed WH_CALLWNDPROC 
            hooks will not receive hook notifications and may behave incorrectly as a result. If the hook 
            procedure does not call CallNextHookEx, the return value should be zero. 
            </returns>
        </member>
        <member name="E:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.MouseMovedEvent">
            <summary>
            Mouse pointer moved
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.MouseMovedExtEvent" -->
        <member name="E:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.MouseClickedEvent">
            <summary>
            Mouse click
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.MouseClickedExtEvent" -->
        <member name="E:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.MouseDownEvents">
            <summary>
            Mouse btn pressed
            </summary>
        </member>
        <member name="E:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.MouseUpEvents">
            <summary>
            Mouse btn released
            </summary>
        </member>
        <member name="E:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.MouseWheelEvents">
            <summary>
            Mouse wheel moved
            </summary>
        </member>
        <member name="E:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.MouseDoubleClickedEvent">
            <summary>
            Mouse dbl click
            </summary>
        </member>
        <member name="M:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.GlobalEvent_OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            </summary>
        </member>
        <member name="E:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.KeyPressEvents">
            <summary>
            Occurs when a key is pressed.
            </summary>
        </member>
        <member name="E:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.KeyUpEvents">
            <summary>
            Occurs when a key is released. 
            </summary>
        </member>
        <member name="E:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.KeyDownEvents">
            <summary>
            Occurs when a key is preseed. 
            </summary>
        </member>
        <member name="T:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.Point">
            <summary>
            The Point structure defines the X- and Y- coordinates of a point. 
            </summary>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/gdi/rectangl_0tiq.asp
            </remarks>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.Point.X">
            <summary>
            Specifies the X-coordinate of the point. 
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.Point.Y">
            <summary>
            Specifies the Y-coordinate of the point. 
            </summary>
        </member>
        <member name="T:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.MouseLLGlobalEventStruct">
            <summary>
            The MSLLHOOKSTRUCT structure contains information about a low-level keyboard input event. 
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.MouseLLGlobalEventStruct.point">
            <summary>
            Specifies a Point structure that contains the X- and Y-coordinates of the cursor, in screen coordinates. 
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.MouseLLGlobalEventStruct.mouseData">
             <summary>
             If the message is WM_MOUSEWHEEL, the high-order word of this member is the wheel delta. 
             The low-order word is reserved. A positive value indicates that the wheel was rotated forward, 
             away from the user; a negative value indicates that the wheel was rotated backward, toward the user. 
             One wheel click is defined as WHEEL_DELTA, which is 120. 
            If the message is WM_XBUTTONDOWN, WM_XBUTTONUP, WM_XBUTTONDBLCLK, WM_NCXBUTTONDOWN, WM_NCXBUTTONUP,
             or WM_NCXBUTTONDBLCLK, the high-order word specifies which X button was pressed or released, 
             and the low-order word is reserved. This value can be one or more of the following values. Otherwise, MouseData is not used. 
            XBUTTON1
            The first X button was pressed or released.
            XBUTTON2
            The second X button was pressed or released.
             </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.MouseLLGlobalEventStruct.flags">
             <summary>
             Specifies the event-injected flag. An application can use the following value to test the mouse Flags. Value Purpose 
            LLMHF_INJECTED Test the event-injected flag.  
            0
            Specifies whether the event was injected. The value is 1 if the event was injected; otherwise, it is 0.
            1-15
            Reserved.
             </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.MouseLLGlobalEventStruct.time">
            <summary>
            Specifies the Time stamp for this message.
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.MouseLLGlobalEventStruct.extraInfo">
            <summary>
            Specifies extra information associated with the message. 
            </summary>
        </member>
        <member name="T:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.KeyboardGlobalEventStruct">
            <summary>
            The KBDLLHOOKSTRUCT structure contains information about a low-level keyboard input event. 
            </summary>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookstructures/cwpstruct.asp
            </remarks>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.KeyboardGlobalEventStruct.virtualKeyCode">
            <summary>
            Specifies a virtual-key code. The code must be a value in the range 1 to 254. 
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.KeyboardGlobalEventStruct.scanCode">
            <summary>
            Specifies a hardware scan code for the key. 
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.KeyboardGlobalEventStruct.flags">
            <summary>
            Specifies the extended-key flag, event-injected flag, context code, and transition-state flag.
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.KeyboardGlobalEventStruct.time">
            <summary>
            Specifies the Time stamp for this message.
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.KeyboardGlobalEventStruct.extraInfo">
            <summary>
            Specifies extra information associated with the message. 
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.WHMOUSE_LL">
            <summary>
            Windows NT/2000/XP: Installs a hook procedure that monitors low-level mouse input events.
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.WHKEYBOARD_LL">
            <summary>
            Windows NT/2000/XP: Installs a hook procedure that monitors low-level keyboard  input events.
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.WHMOUSE">
            <summary>
            Installs a hook procedure that monitors mouse messages. For more information, see the MouseProc hook procedure. 
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.WHKEYBOARD">
            <summary>
            Installs a hook procedure that monitors keystroke messages. For more information, see the KeyboardProc hook procedure. 
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.WMMOUSEMOVE">
            <summary>
            The WMMOUSEMOVE message is posted to a window when the cursor moves. 
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.WMLBUTTONDOWN">
            <summary>
            The WMLBUTTONDOWN message is posted when the user presses the left mouse button 
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.WMRBUTTONDOWN">
            <summary>
            The WMRBUTTONDOWN message is posted when the user presses the right mouse button
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.WMMBUTTONDOWN">
            <summary>
            The WMMBUTTONDOWN message is posted when the user presses the middle mouse button 
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.WMLBUTTONUP">
            <summary>
            The WMLBUTTONUP message is posted when the user releases the left mouse button 
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.WMRBUTTONUP">
            <summary>
            The WMRBUTTONUP message is posted when the user releases the right mouse button 
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.WMMBUTTONUP">
            <summary>
            The WMMBUTTONUP message is posted when the user releases the middle mouse button 
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.WMLBUTTONDBLCLK">
            <summary>
            The WMLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button 
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.WMRBUTTONDBLCLK">
            <summary>
            The WMRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button 
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.WMMBUTTONDBLCLK">
            <summary>
            The WMRBUTTONDOWN message is posted when the user presses the right mouse button 
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.WMMOUSEWHEEL">
            <summary>
            The WMMOUSEWHEEL message is posted when the user presses the mouse wheel. 
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.WMKEYDOWN">
            <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem 
            key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed.
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.WMKEYUP">
            <summary>
            The WMKEYUP message is posted to the window with the keyboard focus when a nonsystem 
            key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, 
            or a keyboard key that is pressed when a window has the keyboard focus.
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.WMSYSKEYDOWN">
            <summary>
            The WMSYSKEYDOWN message is posted to the window with the keyboard focus when the user 
            presses the F10 key (which activates the menu bar) or holds down the ALT key and then 
            presses another key. It also occurs when no window currently has the keyboard focus; 
            in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that 
            receives the message can distinguish between these two contexts by checking the context 
            code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.WMSYSKEYUP">
            <summary>
            The WMSYSKEYUP message is posted to the window with the keyboard focus when the user 
            releases a key that was pressed while the ALT key was held down. It also occurs when no 
            window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent 
            to the active window. The window that receives the message can distinguish between 
            these two contexts by checking the context code in the lParam parameter. 
            </summary>
        </member>
        <member name="M:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.CallNextHookEx(System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            The CallNextHookEx function passes the hook information to the next hook procedure in the current hook chain. 
            A hook procedure can call this function either before or after processing the hook information. 
            </summary>
            <param name="idHook">Ignored.</param>
            <param name="nCode">
            [in] Specifies the hook code passed to the current hook procedure. 
            The next hook procedure uses this code to determine how to process the hook information.
            </param>
            <param name="wParam">
            [in] Specifies the wParam value passed to the current hook procedure. 
            The meaning of this parameter depends on the type of hook associated with the current hook chain. 
            </param>
            <param name="lParam">
            [in] Specifies the lParam value passed to the current hook procedure. 
            The meaning of this parameter depends on the type of hook associated with the current hook chain. 
            </param>
            <returns>
            This value is returned by the next hook procedure in the chain. 
            The current hook procedure must also return this value. The meaning of the return value depends on the hook type. 
            For more information, see the descriptions of the individual hook procedures.
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/setwindowshookex.asp
            </remarks>
        </member>
        <member name="M:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.SetWindowsHookEx(System.Int32,Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.GlobalEventProc,System.IntPtr,System.Int32)">
            <summary>
            The SetWindowsHookEx function installs an application-defined hook procedure into a hook chain. 
            You would install a hook procedure to monitor the system for certain types of events. These events 
            are associated either with a specific thread or with all threads in the same desktop as the calling thread. 
            </summary>
            <param name="idHook">
            [in] Specifies the type of hook procedure to be installed. This parameter can be one of the following values.
            </param>
            <param name="lpfn">
            [in] Pointer to the hook procedure. If the dwThreadId parameter is zero or specifies the identifier of a 
            thread created by a different process, the lpfn parameter must point to a hook procedure in a dynamic-link 
            library (DLL). Otherwise, lpfn can point to a hook procedure in the code associated with the current process.
            </param>
            <param name="hMod">
            [in] Handle to the DLL containing the hook procedure pointed to by the lpfn parameter. 
            The hMod parameter must be set to NULL if the dwThreadId parameter specifies a thread created by 
            the current process and if the hook procedure is within the code associated with the current process. 
            </param>
            <param name="dwThreadId">
            [in] Specifies the identifier of the thread with which the hook procedure is to be associated. 
            If this parameter is zero, the hook procedure is associated with all existing threads running in the 
            same desktop as the calling thread. 
            </param>
            <returns>
            If the function succeeds, the return value is the handle to the hook procedure.
            If the function fails, the return value is NULL. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/setwindowshookex.asp
            </remarks>
        </member>
        <member name="M:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.UnhookWindowsHookEx(System.Int32)">
            <summary>
            The UnhookWindowsHookEx function removes a hook procedure installed in a hook chain by the SetWindowsHookEx function. 
            </summary>
            <param name="idHook">
            [in] Handle to the hook to be removed. This parameter is a hook handle obtained by a previous call to SetWindowsHookEx. 
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/setwindowshookex.asp
            </remarks>
        </member>
        <member name="M:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.GetDoubleClickTime">
            <summary>
            The GetDoubleClickTime function retrieves the current double-click time for the mouse. A double-click is a series of two clicks of the 
            mouse button, the second occurring within a specified time after the first. The double-click time is the maximum number of 
            milliseconds that may occur between the first and second click of a double-click. 
            </summary>
            <returns>
            The return value specifies the current double-click time, in milliseconds. 
            </returns>
            <remarks>
            http://msdn.microsoft.com/en-us/library/ms646258(VS.85).aspx
            </remarks>
        </member>
        <member name="M:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.ToAscii(System.Int32,System.Int32,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            The ToAscii function translates the specified virtual-key code and keyboard 
            state to the corresponding character or characters. The function translates the code 
            using the input language and physical keyboard layout identified by the keyboard layout handle.
            </summary>
            <param name="uVirtKey">
            [in] Specifies the virtual-key code to be translated. 
            </param>
            <param name="uScanCode">
            [in] Specifies the hardware scan code of the key to be translated. 
            The high-order bit of this value is set if the key is up (not pressed). 
            </param>
            <param name="lpbKeyState">
            [in] Pointer to a 256-byte array that contains the current keyboard state. 
            Each element (byte) in the array contains the state of one key. 
            If the high-order bit of a byte is set, the key is down (pressed). 
            The low bit, if set, indicates that the key is toggled on. In this function, 
            only the toggle bit of the CAPS LOCK key is relevant. The toggle state 
            of the NUM LOCK and SCROLL LOCK keys is ignored.
            </param>
            <param name="lpwTransKey">
            [out] Pointer to the buffer that receives the translated character or characters. 
            </param>
            <param name="fuState">
            [in] Specifies whether a menu is active. This parameter must be 1 if a menu is active, or 0 otherwise. 
            </param>
            <returns>
            If the specified key is a dead key, the return value is negative. Otherwise, it is one of the following values. 
            Value Meaning 
            0 The specified virtual key has no translation for the current state of the keyboard. 
            1 One character was copied to the buffer. 
            2 Two characters were copied to the buffer. This usually happens when a dead-key character 
            (accent or diacritic) stored in the keyboard layout cannot be composed with the specified 
            virtual key to form a single character. 
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/userinput/keyboardinput/keyboardinputreference/keyboardinputfunctions/toascii.asp
            </remarks>
        </member>
        <member name="M:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.GetKeyboardState(System.Byte[])">
            <summary>
            The GetKeyboardState function copies the status of the 256 virtual keys to the 
            specified buffer. 
            </summary>
            <param name="pbKeyState">
            [in] Pointer to a 256-byte array that contains keyboard key states. 
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError. 
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/userinput/keyboardinput/keyboardinputreference/keyboardinputfunctions/toascii.asp
            </remarks>
        </member>
        <member name="M:Infosys.ATR.UIAutomation.UserActivityMonitor.GlobalEventHandler.GetKeyState(System.Int32)">
             <summary>
             The GetKeyState function retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled 
             (on, off—alternating each time the key is pressed). 
             </summary>
             <param name="vKey">
             [in] Specifies a virtual key. If the desired virtual key is a letter or digit (A through Z, a through z, or 0 through 9), nVirtKey must be set to the ASCII value of that character. For other keys, it must be a virtual-key code. 
             </param>
             <returns>
             The return value specifies the status of the specified virtual key, as follows: 
            If the high-order bit is 1, the key is down; otherwise, it is up.
            If the low-order bit is 1, the key is toggled. A key, such as the CAPS LOCK key, is toggled if it is turned on. The key is off and untoggled if the low-order bit is 0. A toggle key's indicator light (if any) on the keyboard will be on when the key is toggled, and off when the key is untoggled.
             </returns>
             <remarks>http://msdn.microsoft.com/en-us/library/ms646301.aspx</remarks>
        </member>
        <member name="T:Infosys.ATR.UIAutomation.UserActivityMonitor.MouseEventExtArgsHandler">
            <summary>
            Provides data for the MouseClickExt and MouseMoveExt events. It also provides a property Handled.
            Set this property to <b>true</b> to prevent further processing of the event in other applications.
            </summary>
        </member>
        <member name="M:Infosys.ATR.UIAutomation.UserActivityMonitor.MouseEventExtArgsHandler.#ctor(System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the MouseEventArgs class. 
            </summary>
            <param name="buttons">One of the MouseButtons values indicating which mouse button was pressed.</param>
            <param name="clicks">The number of times a mouse button was pressed.</param>
            <param name="x">The x-coordinate of a mouse click, in pixels.</param>
            <param name="y">The y-coordinate of a mouse click, in pixels.</param>
            <param name="delta">A signed count of the number of detents the wheel has rotated.</param>
        </member>
        <member name="M:Infosys.ATR.UIAutomation.UserActivityMonitor.MouseEventExtArgsHandler.#ctor(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Initializes a new instance of the MouseEventArgs class. 
            </summary>
            <param name="e">An ordinary <see cref="T:System.Windows.Forms.MouseEventArgs"/> argument to be extended.</param>
        </member>
        <member name="P:Infosys.ATR.UIAutomation.UserActivityMonitor.MouseEventExtArgsHandler.Handled">
            <summary>
            Set this property to <b>true</b> inside your event handler to prevent further processing of the event in other applications.
            </summary>
        </member>
    </members>
</doc>
